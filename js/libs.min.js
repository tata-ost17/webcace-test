var clock,Base,FlipClock;!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(x,e){"use strict";function g(e){return null!=e&&e===e.window}var t=[],n=Object.getPrototypeOf,a=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,o=t.indexOf,i={},s=i.toString,m=i.hasOwnProperty,r=m.toString,c=r.call(Object),y={},k=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},T=x.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,i){var n,o,s=(i=i||T).createElement("script");if(s.text=e,t)for(n in u)(o=t[n]||t.getAttribute&&t.getAttribute(n))&&s.setAttribute(n,o);i.head.appendChild(s).parentNode.removeChild(s)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[s.call(e)]||"object":typeof e}var d="3.5.1",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&"length"in e&&e.length,i=C(e);return!k(e)&&!g(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:d,constructor:S,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(i){return this.pushStack(S.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},S.extend=S.fn.extend=function(){var e,t,i,n,o,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||k(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(c&&n&&(S.isPlainObject(n)||(o=Array.isArray(n)))?(i=r[t],s=o&&!Array.isArray(i)?[]:o||S.isPlainObject(i)?i:{},o=!1,r[t]=S.extend(c,s,n)):void 0!==n&&(r[t]=n));return r},S.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==s.call(e))&&(!(t=n(e))||"function"==typeof(i=m.call(t,"constructor")&&t.constructor)&&r.call(i)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,i){b(e,{nonce:t&&t.nonce},i)},each:function(e,t){var i,n=0;if(p(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},makeArray:function(e,t){var i=t||[];return null!=e&&(p(Object(e))?S.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:o.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,o=e.length;n<i;n++)e[o++]=t[n];return e.length=o,e},grep:function(e,t,i){for(var n=[],o=0,s=e.length,r=!i;o<s;o++)!t(e[o],o)!=r&&n.push(e[o]);return n},map:function(e,t,i){var n,o,s=0,r=[];if(p(e))for(n=e.length;s<n;s++)null!=(o=t(e[s],s,i))&&r.push(o);else for(s in e)null!=(o=t(e[s],s,i))&&r.push(o);return v(r)},guid:1,support:y}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=t[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var h=function(i){function d(e,t){var i="0x"+e.slice(1)-65536;return t||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function o(){w()}var e,h,b,s,r,f,p,g,C,l,c,w,x,a,T,v,u,m,y,S="sizzle"+ +new Date,k=i.document,L=0,n=0,F=le(),$=le(),D=le(),j=le(),A=function(e,t){return e===t&&(c=!0),0},E={}.hasOwnProperty,t=[],M=t.pop,H=t.push,O=t.push,N=t.slice,q=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",_="(?:\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",z="\\["+I+"*("+_+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+_+"))|)"+I+"*\\]",B=":("+_+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",R=new RegExp(I+"+","g"),W=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g"),Q=new RegExp("^"+I+"*,"+I+"*"),U=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),X=new RegExp(I+"|>"),V=new RegExp(B),Y=new RegExp("^"+_+"$"),G={ID:new RegExp("^#("+_+")"),CLASS:new RegExp("^\\.("+_+")"),TAG:new RegExp("^("+_+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,ne=new RegExp("\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\([^\\r\\n\\f])","g"),oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,se=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{O.apply(t=N.call(k.childNodes),k.childNodes),t[k.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){H.apply(e,N.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function ae(t,e,i,n){var o,s,r,a,l,c,u,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return i;if(!n&&(w(e),e=e||x,T)){if(11!==p&&(l=te.exec(t)))if(o=l[1]){if(9===p){if(!(r=e.getElementById(o)))return i;if(r.id===o)return i.push(r),i}else if(d&&(r=d.getElementById(o))&&y(e,r)&&r.id===o)return i.push(r),i}else{if(l[2])return O.apply(i,e.getElementsByTagName(t)),i;if((o=l[3])&&h.getElementsByClassName&&e.getElementsByClassName)return O.apply(i,e.getElementsByClassName(o)),i}if(h.qsa&&!j[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(u=t,d=e,1===p&&(X.test(t)||U.test(t))){for((d=ie.test(t)&&me(e.parentNode)||e)===e&&h.scope||((a=e.getAttribute("id"))?a=a.replace(oe,se):e.setAttribute("id",a=S)),s=(c=f(t)).length;s--;)c[s]=(a?"#"+a:":scope")+" "+ke(c[s]);u=c.join(",")}try{return O.apply(i,d.querySelectorAll(u)),i}catch(e){j(t,!0)}finally{a===S&&e.removeAttribute("id")}}}return g(t.replace(W,"$1"),e,i,n)}function le(){var n=[];return function e(t,i){return n.push(t+" ")>b.cacheLength&&delete e[n.shift()],e[t+" "]=i}}function ce(e){return e[S]=!0,e}function ue(e){var t=x.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var i=e.split("|"),n=i.length;n--;)b.attrHandle[i[n]]=t}function pe(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function he(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function fe(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&re(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(r){return ce(function(s){return s=+s,ce(function(e,t){for(var i,n=r([],e.length,s),o=n.length;o--;)e[i=n[o]]&&(e[i]=!(t[i]=e[i]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in h=ae.support={},r=ae.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!K.test(t||i&&i.nodeName||"HTML")},w=ae.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:k;return n!=x&&9===n.nodeType&&n.documentElement&&(a=(x=n).documentElement,T=!r(x),k!=x&&(i=x.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",o,!1):i.attachEvent&&i.attachEvent("onunload",o)),h.scope=ue(function(e){return a.appendChild(e).appendChild(x.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),h.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),h.getElementsByTagName=ue(function(e){return e.appendChild(x.createComment("")),!e.getElementsByTagName("*").length}),h.getElementsByClassName=ee.test(x.getElementsByClassName),h.getById=ue(function(e){return a.appendChild(e).id=S,!x.getElementsByName||!x.getElementsByName(S).length}),h.getById?(b.filter.ID=function(e){var t=e.replace(ne,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var i=t.getElementById(e);return i?[i]:[]}}):(b.filter.ID=function(e){var i=e.replace(ne,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var i,n,o,s=t.getElementById(e);if(s){if((i=s.getAttributeNode("id"))&&i.value===e)return[s];for(o=t.getElementsByName(e),n=0;s=o[n++];)if((i=s.getAttributeNode("id"))&&i.value===e)return[s]}return[]}}),b.find.TAG=h.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):h.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],o=0,s=t.getElementsByTagName(e);if("*"!==e)return s;for(;i=s[o++];)1===i.nodeType&&n.push(i);return n},b.find.CLASS=h.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&T)return t.getElementsByClassName(e)},u=[],v=[],(h.qsa=ee.test(x.querySelectorAll))&&(ue(function(e){var t;a.appendChild(e).innerHTML="<a id='"+S+"'></a><select id='"+S+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+I+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+I+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+S+"-]").length||v.push("~="),(t=x.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+I+"*name"+I+"*="+I+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+S+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=x.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+I+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(h.matchesSelector=ee.test(m=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ue(function(e){h.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),u.push("!=",B)}),v=v.length&&new RegExp(v.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(a.compareDocumentPosition),y=t||ee.test(a.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return c=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!h.sortDetached&&t.compareDocumentPosition(e)===i?e==x||e.ownerDocument==k&&y(k,e)?-1:t==x||t.ownerDocument==k&&y(k,t)?1:l?q(l,e)-q(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return c=!0,0;var i,n=0,o=e.parentNode,s=t.parentNode,r=[e],a=[t];if(!o||!s)return e==x?-1:t==x?1:o?-1:s?1:l?q(l,e)-q(l,t):0;if(o===s)return pe(e,t);for(i=e;i=i.parentNode;)r.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?pe(r[n],a[n]):r[n]==k?-1:a[n]==k?1:0}),x},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(w(e),h.matchesSelector&&T&&!j[t+" "]&&(!u||!u.test(t))&&(!v||!v.test(t)))try{var i=m.call(e,t);if(i||h.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){j(t,!0)}return 0<ae(t,x,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!=x&&w(e),y(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=x&&w(e);var i=b.attrHandle[t.toLowerCase()],n=i&&E.call(b.attrHandle,t.toLowerCase())?i(e,t,!T):void 0;return void 0!==n?n:h.attributes||!T?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},ae.escape=function(e){return(e+"").replace(oe,se)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],n=0,o=0;if(c=!h.detectDuplicates,l=!h.sortStable&&e.slice(0),e.sort(A),c){for(;t=e[o++];)t===e[o]&&(n=i.push(o));for(;n--;)e.splice(i[n],1)}return l=null,e},s=ae.getText=function(e){var t,i="",n=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=s(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[n++];)i+=s(t);return i},(b=ae.selectors={cacheLength:50,createPseudo:ce,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&V.test(i)&&(t=f(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=F[e+" "];return t||(t=new RegExp("(^|"+I+")"+e+"("+I+"|$)"))&&F(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,o){return function(e){var t=ae.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===o:"!="===n?t!==o:"^="===n?o&&0===t.indexOf(o):"*="===n?o&&-1<t.indexOf(o):"$="===n?o&&t.slice(-o.length)===o:"~="===n?-1<(" "+t.replace(R," ")+" ").indexOf(o):"|="===n&&(t===o||t.slice(0,o.length+1)===o+"-"))}},CHILD:function(f,e,t,g,v){var m="nth"!==f.slice(0,3),y="last"!==f.slice(-4),k="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,i){var n,o,s,r,a,l,c=m!=y?"nextSibling":"previousSibling",u=e.parentNode,d=k&&e.nodeName.toLowerCase(),p=!i&&!k,h=!1;if(u){if(m){for(;c;){for(r=e;r=r[c];)if(k?r.nodeName.toLowerCase()===d:1===r.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&p){for(h=(a=(n=(o=(s=(r=u)[S]||(r[S]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===L&&n[1])&&n[2],r=a&&u.childNodes[a];r=++a&&r&&r[c]||(h=a=0)||l.pop();)if(1===r.nodeType&&++h&&r===e){o[f]=[L,a,h];break}}else if(p&&(h=a=(n=(o=(s=(r=e)[S]||(r[S]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===L&&n[1]),!1===h)for(;(r=++a&&r&&r[c]||(h=a=0)||l.pop())&&((k?r.nodeName.toLowerCase()!==d:1!==r.nodeType)||!++h||(p&&((o=(s=r[S]||(r[S]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]=[L,h]),r!==e)););return(h-=v)===g||h%g==0&&0<=h/g}}},PSEUDO:function(e,s){var t,r=b.pseudos[e]||b.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[S]?r(s):1<r.length?(t=[e,e,"",s],b.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var i,n=r(e,s),o=n.length;o--;)e[i=q(e,n[o])]=!(t[i]=n[o])}):function(e){return r(e,0,t)}):r}},pseudos:{not:ce(function(e){var n=[],o=[],a=p(e.replace(W,"$1"));return a[S]?ce(function(e,t,i,n){for(var o,s=a(e,null,n,[]),r=e.length;r--;)(o=s[r])&&(e[r]=!(t[r]=o))}):function(e,t,i){return n[0]=e,a(n,null,i,o),n[0]=null,!o.pop()}}),has:ce(function(t){return function(e){return 0<ae(t,e).length}}),contains:ce(function(t){return t=t.replace(ne,d),function(e){return-1<(e.textContent||s(e)).indexOf(t)}}),lang:ce(function(i){return Y.test(i||"")||ae.error("unsupported lang: "+i),i=i.replace(ne,d).toLowerCase(),function(e){var t;do{if(t=T?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===x.activeElement&&(!x.hasFocus||x.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,i){return[i<0?i+t:i]}),even:ve(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:ve(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:ve(function(e,t,i){for(var n=i<0?i+t:t<i?t:i;0<=--n;)e.push(n);return e}),gt:ve(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=he(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=fe(e);function ye(){}function ke(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function be(a,e,t){var l=e.dir,c=e.next,u=c||l,d=t&&"parentNode"===u,p=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||d)return a(e,t,i);return!1}:function(e,t,i){var n,o,s,r=[L,p];if(i){for(;e=e[l];)if((1===e.nodeType||d)&&a(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(o=(s=e[S]||(e[S]={}))[e.uniqueID]||(s[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((n=o[u])&&n[0]===L&&n[1]===p)return r[2]=n[2];if((o[u]=r)[2]=a(e,t,i))return!0}return!1}}function Ce(o){return 1<o.length?function(e,t,i){for(var n=o.length;n--;)if(!o[n](e,t,i))return!1;return!0}:o[0]}function we(e,t,i,n,o){for(var s,r=[],a=0,l=e.length,c=null!=t;a<l;a++)(s=e[a])&&(i&&!i(s,n,o)||(r.push(s),c&&t.push(a)));return r}function xe(h,f,g,v,m,e){return v&&!v[S]&&(v=xe(v)),m&&!m[S]&&(m=xe(m,e)),ce(function(e,t,i,n){var o,s,r,a=[],l=[],c=t.length,u=e||function(e,t,i){for(var n=0,o=t.length;n<o;n++)ae(e,t[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),d=!h||!e&&f?u:we(u,a,h,i,n),p=g?m||(e?h:c||v)?[]:t:d;if(g&&g(d,p,i,n),v)for(o=we(p,l),v(o,[],i,n),s=o.length;s--;)(r=o[s])&&(p[l[s]]=!(d[l[s]]=r));if(e){if(m||h){if(m){for(o=[],s=p.length;s--;)(r=p[s])&&o.push(d[s]=r);m(null,p=[],o,n)}for(s=p.length;s--;)(r=p[s])&&-1<(o=m?q(e,r):a[s])&&(e[o]=!(t[o]=r))}}else p=we(p===t?p.splice(c,p.length):p),m?m(null,t,p,n):O.apply(t,p)})}function Te(e){for(var o,t,i,n=e.length,s=b.relative[e[0].type],r=s||b.relative[" "],a=s?1:0,l=be(function(e){return e===o},r,!0),c=be(function(e){return-1<q(o,e)},r,!0),u=[function(e,t,i){var n=!s&&(i||t!==C)||((o=t).nodeType?l:c)(e,t,i);return o=null,n}];a<n;a++)if(t=b.relative[e[a].type])u=[be(Ce(u),t)];else{if((t=b.filter[e[a].type].apply(null,e[a].matches))[S]){for(i=++a;i<n&&!b.relative[e[i].type];i++);return xe(1<a&&Ce(u),1<a&&ke(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(W,"$1"),t,a<i&&Te(e.slice(a,i)),i<n&&Te(e=e.slice(i)),i<n&&ke(e))}u.push(t)}return Ce(u)}function Se(v,m){function e(e,t,i,n,o){var s,r,a,l=0,c="0",u=e&&[],d=[],p=C,h=e||k&&b.find.TAG("*",o),f=L+=null==p?1:Math.random()||.1,g=h.length;for(o&&(C=t==x||t||o);c!==g&&null!=(s=h[c]);c++){if(k&&s){for(r=0,t||s.ownerDocument==x||(w(s),i=!T);a=v[r++];)if(a(s,t||x,i)){n.push(s);break}o&&(L=f)}y&&((s=!a&&s)&&l--,e&&u.push(s))}if(l+=c,y&&c!==l){for(r=0;a=m[r++];)a(u,d,t,i);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=M.call(n));d=we(d)}O.apply(n,d),o&&!e&&0<d.length&&1<l+m.length&&ae.uniqueSort(n)}return o&&(L=f,C=p),u}var y=0<m.length,k=0<v.length;return y?ce(e):e}return ye.prototype=b.filters=b.pseudos,b.setFilters=new ye,f=ae.tokenize=function(e,t){var i,n,o,s,r,a,l,c=$[e+" "];if(c)return t?0:c.slice(0);for(r=e,a=[],l=b.preFilter;r;){for(s in i&&!(n=Q.exec(r))||(n&&(r=r.slice(n[0].length)||r),a.push(o=[])),i=!1,(n=U.exec(r))&&(i=n.shift(),o.push({value:i,type:n[0].replace(W," ")}),r=r.slice(i.length)),b.filter)!(n=G[s].exec(r))||l[s]&&!(n=l[s](n))||(i=n.shift(),o.push({value:i,type:s,matches:n}),r=r.slice(i.length));if(!i)break}return t?r.length:r?ae.error(e):$(e,a).slice(0)},p=ae.compile=function(e,t){var i,n=[],o=[],s=D[e+" "];if(!s){for(i=(t=t||f(e)).length;i--;)(s=Te(t[i]))[S]?n.push(s):o.push(s);(s=D(e,Se(o,n))).selector=e}return s},g=ae.select=function(e,t,i,n){var o,s,r,a,l,c="function"==typeof e&&e,u=!n&&f(e=c.selector||e);if(i=i||[],1===u.length){if(2<(s=u[0]=u[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===t.nodeType&&T&&b.relative[s[1].type]){if(!(t=(b.find.ID(r.matches[0].replace(ne,d),t)||[])[0]))return i;c&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(o=G.needsContext.test(e)?0:s.length;o--&&(r=s[o],!b.relative[a=r.type]);)if((l=b.find[a])&&(n=l(r.matches[0].replace(ne,d),ie.test(s[0].type)&&me(t.parentNode)||t))){if(s.splice(o,1),!(e=n.length&&ke(s)))return O.apply(i,n),i;break}}return(c||p(e,u))(n,t,!T,i,!t||ie.test(e)&&me(t.parentNode)||t),i},h.sortStable=S.split("").sort(A).join("")===S,h.detectDuplicates=!!c,w(),h.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(x.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),h.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||de(P,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),ae}(x);S.find=h,S.expr=h.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=h.uniqueSort,S.text=h.getText,S.isXMLDoc=h.isXML,S.contains=h.contains,S.escapeSelector=h.escape;function f(e,t,i){for(var n=[],o=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&S(e).is(i))break;n.push(e)}return n}function w(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var L=S.expr.match.needsContext;function F(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var $=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,i,n){return k(i)?S.grep(e,function(e,t){return!!i.call(e,t,e)!==n}):i.nodeType?S.grep(e,function(e){return e===i!==n}):"string"!=typeof i?S.grep(e,function(e){return-1<o.call(i,e)!==n}):S.filter(i,e,n)}S.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?S.find.matchesSelector(n,e)?[n]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,i,n=this.length,o=this;if("string"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<n;t++)if(S.contains(o[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)S.find(e,o[t],i);return 1<n?S.uniqueSort(i):i},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&L.test(e)?S(e):e||[],!1).length}});var j,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,i){var n,o;if(!e)return this;if(i=i||j,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):k(e)?void 0!==i.ready?i.ready(e):e(S):S.makeArray(e,this);if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:A.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:T,!0)),$.test(n[1])&&S.isPlainObject(t))for(n in t)k(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(o=T.getElementById(n[2]))&&(this[0]=o,this.length=1),this}).prototype=S.fn,j=S(T);var E=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,o=this.length,s=[],r="string"!=typeof e&&S(e);if(!L.test(e))for(;n<o;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&S.find.matchesSelector(i,e))){s.push(i);break}return this.pushStack(1<s.length?S.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?o.call(S(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return f(e,"parentNode")},parentsUntil:function(e,t,i){return f(e,"parentNode",i)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return f(e,"nextSibling")},prevAll:function(e){return f(e,"previousSibling")},nextUntil:function(e,t,i){return f(e,"nextSibling",i)},prevUntil:function(e,t,i){return f(e,"previousSibling",i)},siblings:function(e){return w((e.parentNode||{}).firstChild,e)},children:function(e){return w(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:(F(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},function(n,o){S.fn[n]=function(e,t){var i=S.map(this,o,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=S.filter(t,i)),1<this.length&&(M[n]||S.uniqueSort(i),E.test(n)&&i.reverse()),this.pushStack(i)}});var O=/[^\x20\t\r\n\f]+/g;function N(e){return e}function q(e){throw e}function P(e,t,i,n){var o;try{e&&k(o=e.promise)?o.call(e).done(t).fail(i):e&&k(o=e.then)?o.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}S.Callbacks=function(n){var e,i;n="string"==typeof n?(e=n,i={},S.each(e.match(O)||[],function(e,t){i[t]=!0}),i):S.extend({},n);function o(){for(a=a||n.once,r=s=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&n.stopOnFalse&&(u=l.length,t=!1);n.memory||(t=!1),s=!1,a&&(l=t?[]:"")}var s,t,r,a,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!s&&(u=l.length-1,c.push(t)),function i(e){S.each(e,function(e,t){k(t)?n.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==C(t)&&i(t)})}(arguments),t&&!s&&o()),this},remove:function(){return S.each(arguments,function(e,t){for(var i;-1<(i=S.inArray(t,l,i));)l.splice(i,1),i<=u&&u--}),this},has:function(e){return e?-1<S.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=c=[],t||s||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),s||o()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!r}};return d},S.extend({Deferred:function(e){var s=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],o="pending",r={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var o=arguments;return S.Deferred(function(n){S.each(s,function(e,t){var i=k(o[t[4]])&&o[t[4]];a[t[1]](function(){var e=i&&i.apply(this,arguments);e&&k(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,i?[e]:arguments)})}),o=null}).promise()},then:function(t,i,n){var l=0;function c(o,s,r,a){return function(){function e(){var e,t;if(!(o<l)){if((e=r.apply(i,n))===s.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,k(t)?a?t.call(e,c(l,s,N,a),c(l,s,q,a)):(l++,t.call(e,c(l,s,N,a),c(l,s,q,a),c(l,s,N,s.notifyWith))):(r!==N&&(i=void 0,n=[e]),(a||s.resolveWith)(i,n))}}var i=this,n=arguments,t=a?e:function(){try{e()}catch(e){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(e,t.stackTrace),l<=o+1&&(r!==q&&(i=void 0,n=[e]),s.rejectWith(i,n))}};o?t():(S.Deferred.getStackHook&&(t.stackTrace=S.Deferred.getStackHook()),x.setTimeout(t))}}return S.Deferred(function(e){s[0][3].add(c(0,e,k(n)?n:N,e.notifyWith)),s[1][3].add(c(0,e,k(t)?t:N)),s[2][3].add(c(0,e,k(i)?i:q))}).promise()},promise:function(e){return null!=e?S.extend(e,r):r}},a={};return S.each(s,function(e,t){var i=t[2],n=t[5];r[t[1]]=i.add,n&&i.add(function(){o=n},s[3-e][2].disable,s[3-e][3].disable,s[0][2].lock,s[0][3].lock),i.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=i.fireWith}),r.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){o[t]=this,s[t]=1<arguments.length?a.call(arguments):e,--i||r.resolveWith(o,s)}}var i=arguments.length,n=i,o=Array(n),s=a.call(arguments),r=S.Deferred();if(i<=1&&(P(e,r.done(t(n)).resolve,r.reject,!i),"pending"===r.state()||k(s[n]&&s[n].then)))return r.then();for(;n--;)P(s[n],t(n),r.reject);return r.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){x.console&&x.console.warn&&e&&I.test(e.name)&&x.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){x.setTimeout(function(){throw e})};var _=S.Deferred();function z(){T.removeEventListener("DOMContentLoaded",z),x.removeEventListener("load",z),S.ready()}S.fn.ready=function(e){return _.then(e).catch(function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||_.resolveWith(T,[S])}}),S.ready.then=_.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?x.setTimeout(S.ready):(T.addEventListener("DOMContentLoaded",z),x.addEventListener("load",z));var B=function(e,t,i,n,o,s,r){var a=0,l=e.length,c=null==i;if("object"===C(i))for(a in o=!0,i)B(e,t,a,i[a],!0,s,r);else if(void 0!==n&&(o=!0,k(n)||(r=!0),c&&(t=r?(t.call(e,n),null):(c=t,function(e,t,i){return c.call(S(e),i)})),t))for(;a<l;a++)t(e[a],i,r?n:n.call(e[a],a,t(e[a],i)));return o?e:c?t.call(e):l?t(e[0],i):s},R=/^-ms-/,W=/-([a-z])/g;function Q(e,t){return t.toUpperCase()}function U(e){return e.replace(R,"ms-").replace(W,Q)}function X(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function V(){this.expando=S.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,o=this.cache(e);if("string"==typeof t)o[U(t)]=i;else for(n in t)o[U(n)]=t[n];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(U):(t=U(t))in n?[t]:t.match(O)||[]).length;for(;i--;)delete n[t[i]]}void 0!==t&&!S.isEmptyObject(n)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var Y=new V,G=new V,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function Z(e,t,i){var n,o;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===(o=i)||"false"!==o&&("null"===o?null:o===+o+""?+o:K.test(o)?JSON.parse(o):o)}catch(e){}G.set(e,t,i)}else i=void 0;return i}S.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,i){return G.access(e,t,i)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,i){return Y.access(e,t,i)},_removeData:function(e,t){Y.remove(e,t)}}),S.fn.extend({data:function(i,e){var t,n,o,s=this[0],r=s&&s.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){G.set(this,i)}):B(this,function(e){var t;if(s&&void 0===e)return void 0!==(t=G.get(s,i))||void 0!==(t=Z(s,i))?t:void 0;this.each(function(){G.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=G.get(s),1===s.nodeType&&!Y.get(s,"hasDataAttrs"))){for(t=r.length;t--;)r[t]&&0===(n=r[t].name).indexOf("data-")&&(n=U(n.slice(5)),Z(s,n,o[n]));Y.set(s,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),S.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=Y.get(e,t),i&&(!n||Array.isArray(i)?n=Y.access(e,t,S.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=S.queue(e,t),n=i.length,o=i.shift(),s=S._queueHooks(e,t);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===t&&i.unshift("inprogress"),delete s.stop,o.call(e,function(){S.dequeue(e,t)},s)),!n&&s&&s.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return Y.get(e,i)||Y.access(e,i,{empty:S.Callbacks("once memory").add(function(){Y.remove(e,[t+"queue",i])})})}}),S.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?S.queue(this[0],t):void 0===i?this:this.each(function(){var e=S.queue(this,t,i);S._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&S.dequeue(this,t)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--o||s.resolveWith(r,[r])}var n,o=1,s=S.Deferred(),r=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Y.get(r[a],e+"queueHooks"))&&n.empty&&(o++,n.empty.add(i));return i(),s.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ne=T.documentElement,oe=function(e){return S.contains(e.ownerDocument,e)},se={composed:!0};ne.getRootNode&&(oe=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===S.css(e,"display")};function ae(e,t,i,n){var o,s,r=20,a=n?function(){return n.cur()}:function(){return S.css(e,t,"")},l=a(),c=i&&i[3]||(S.cssNumber[t]?"":"px"),u=e.nodeType&&(S.cssNumber[t]||"px"!==c&&+l)&&te.exec(S.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;r--;)S.style(e,t,u+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),u/=s;u*=2,S.style(e,t,u+c),i=i||[]}return i&&(u=+u||+l||0,o=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=u,n.end=o)),o}var le={};function ce(e,t){for(var i,n,o,s,r,a,l,c=[],u=0,d=e.length;u<d;u++)(n=e[u]).style&&(i=n.style.display,t?("none"===i&&(c[u]=Y.get(n,"display")||null,c[u]||(n.style.display="")),""===n.style.display&&re(n)&&(c[u]=(l=r=s=void 0,r=(o=n).ownerDocument,a=o.nodeName,(l=le[a])||(s=r.body.appendChild(r.createElement(a)),l=S.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),le[a]=l)))):"none"!==i&&(c[u]="none",Y.set(n,"display",i)));for(u=0;u<d;u++)null!=c[u]&&(e[u].style.display=c[u]);return e}S.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){re(this)?S(this).show():S(this).hide()})}});var ue,de,pe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;ue=T.createDocumentFragment().appendChild(T.createElement("div")),(de=T.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ue.appendChild(de),y.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",y.option=!!ue.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&F(e,t)?S.merge([e],i):i}function me(e,t){for(var i=0,n=e.length;i<n;i++)Y.set(e[i],"globalEval",!t||Y.get(t[i],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,y.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function ke(e,t,i,n,o){for(var s,r,a,l,c,u,d=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((s=e[h])||0===s)if("object"===C(s))S.merge(p,s.nodeType?[s]:s);else if(ye.test(s)){for(r=r||d.appendChild(t.createElement("div")),a=(he.exec(s)||["",""])[1].toLowerCase(),l=ge[a]||ge._default,r.innerHTML=l[1]+S.htmlPrefilter(s)+l[2],u=l[0];u--;)r=r.lastChild;S.merge(p,r.childNodes),(r=d.firstChild).textContent=""}else p.push(t.createTextNode(s));for(d.textContent="",h=0;s=p[h++];)if(n&&-1<S.inArray(s,n))o&&o.push(s);else if(c=oe(s),r=ve(d.appendChild(s),"script"),c&&me(r),i)for(u=0;s=r[u++];)fe.test(s.type||"")&&i.push(s);return d}var be=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,we=/^([^.]*)(?:\.(.+)|)/;function xe(){return!0}function Te(){return!1}function Se(e,t){return e===function(){try{return T.activeElement}catch(e){}}()==("focus"===t)}function Le(e,t,i,n,o,s){var r,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)Le(e,a,i,n,t[a],s);return e}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=Te;else if(!o)return e;return 1===s&&(r=o,(o=function(e){return S().off(e),r.apply(this,arguments)}).guid=r.guid||(r.guid=S.guid++)),e.each(function(){S.event.add(this,t,o,n,i)})}function Fe(e,o,s){s?(Y.set(e,o,!1),S.event.add(e,o,{namespace:!1,handler:function(e){var t,i,n=Y.get(this,o);if(1&e.isTrigger&&this[o]){if(n.length)(S.event.special[o]||{}).delegateType&&e.stopPropagation();else if(n=a.call(arguments),Y.set(this,o,n),t=s(this,o),this[o](),n!==(i=Y.get(this,o))||t?Y.set(this,o,!1):i={},n!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else n.length&&(Y.set(this,o,{value:S.event.trigger(S.extend(n[0],S.Event.prototype),n.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,o)&&S.event.add(e,o,xe)}S.event={global:{},add:function(t,e,i,n,o){var s,r,a,l,c,u,d,p,h,f,g,v=Y.get(t);if(X(t))for(i.handler&&(i=(s=i).handler,o=s.selector),o&&S.find.matchesSelector(ne,o),i.guid||(i.guid=S.guid++),(l=v.events)||(l=v.events=Object.create(null)),(r=v.handle)||(r=v.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(O)||[""]).length;c--;)h=g=(a=we.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),h&&(d=S.event.special[h]||{},h=(o?d.delegateType:d.bindType)||h,d=S.event.special[h]||{},u=S.extend({type:h,origType:g,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:f.join(".")},s),(p=l[h])||((p=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(h,r)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),S.event.global[h]=!0)},remove:function(e,t,i,n,o){var s,r,a,l,c,u,d,p,h,f,g,v=Y.hasData(e)&&Y.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(O)||[""]).length;c--;)if(h=g=(a=we.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),h){for(d=S.event.special[h]||{},p=l[h=(n?d.delegateType:d.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=p.length;s--;)u=p[s],!o&&g!==u.origType||i&&i.guid!==u.guid||a&&!a.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(p.splice(s,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));r&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,f,v.handle)||S.removeEvent(e,h,v.handle),delete l[h])}else for(h in l)S.event.remove(e,h+t[c],i,n,!0);S.isEmptyObject(l)&&Y.remove(e,"handle events")}},dispatch:function(e){var t,i,n,o,s,r,a=new Array(arguments.length),l=S.event.fix(e),c=(Y.get(this,"events")||Object.create(null))[l.type]||[],u=S.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(r=S.event.handlers.call(this,l,c),t=0;(o=r[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,i=0;(s=o.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(n=((S.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var i,n,o,s,r,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[o=(n=t[i]).selector+" "]&&(r[o]=n.needsContext?-1<S(o,this).index(c):S.find(o,this,null,[c]).length),r[o]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:k(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&F(t,"input")&&Fe(t,"click",xe),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&F(t,"input")&&Fe(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&F(t,"input")&&Y.get(t,"click")||F(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(e,t){S.event.special[e]={setup:function(){return Fe(this,e,Se),!1},trigger:function(){return Fe(this,e),!0},delegateType:t}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){S.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||S.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=o),t}}}),S.fn.extend({on:function(e,t,i,n){return Le(this,e,t,i,n)},one:function(e,t,i,n){return Le(this,e,t,i,n,1)},off:function(e,t,i){var n,o;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,S(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Te),this.each(function(){S.event.remove(this,e,i,t)});for(o in e)this.off(o,t,e[o]);return this}});var $e=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return F(e,"table")&&F(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function Ee(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Me(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var i,n,o,s,r,a;if(1===t.nodeType){if(Y.hasData(e)&&(a=Y.get(e).events))for(o in Y.remove(t,"handle events"),a)for(i=0,n=a[o].length;i<n;i++)S.event.add(t,o,a[o][i]);G.hasData(e)&&(s=G.access(e),r=S.extend({},s),G.set(t,r))}}function Oe(i,n,o,s){n=v(n);var e,t,r,a,l,c,u=0,d=i.length,p=d-1,h=n[0],f=k(h);if(f||1<d&&"string"==typeof h&&!y.checkClone&&De.test(h))return i.each(function(e){var t=i.eq(e);f&&(n[0]=h.call(this,e,t.html())),Oe(t,n,o,s)});if(d&&(t=(e=ke(n,i[0].ownerDocument,!1,i,s)).firstChild,1===e.childNodes.length&&(e=t),t||s)){for(a=(r=S.map(ve(e,"script"),Ee)).length;u<d;u++)l=e,u!==p&&(l=S.clone(l,!0,!0),a&&S.merge(r,ve(l,"script"))),o.call(i[u],l,u);if(a)for(c=r[r.length-1].ownerDocument,S.map(r,Me),u=0;u<a;u++)l=r[u],fe.test(l.type||"")&&!Y.access(l,"globalEval")&&S.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&!l.noModule&&S._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):b(l.textContent.replace(je,""),l,c))}return i}function Ne(e,t,i){for(var n,o=t?S.filter(t,e):e,s=0;null!=(n=o[s]);s++)i||1!==n.nodeType||S.cleanData(ve(n)),n.parentNode&&(i&&oe(n)&&me(ve(n,"script")),n.parentNode.removeChild(n));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,i){var n,o,s,r,a,l,c,u=e.cloneNode(!0),d=oe(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(r=ve(u),n=0,o=(s=ve(e)).length;n<o;n++)a=s[n],l=r[n],"input"===(c=l.nodeName.toLowerCase())&&pe.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(i)for(s=s||ve(e),r=r||ve(u),n=0,o=s.length;n<o;n++)He(s[n],r[n]);else He(e,u);return 0<(r=ve(u,"script")).length&&me(r,!d&&ve(e,"script")),u},cleanData:function(e){for(var t,i,n,o=S.event.special,s=0;void 0!==(i=e[s]);s++)if(X(i)){if(t=i[Y.expando]){if(t.events)for(n in t.events)o[n]?S.event.remove(i,n):S.removeEvent(i,n,t.handle);i[Y.expando]=void 0}i[G.expando]&&(i[G.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Ne(this,e,!0)},remove:function(e){return Ne(this,e)},text:function(e){return B(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Oe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)})},prepend:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!$e.test(e)&&!ge[(he.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(S.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return Oe(this,arguments,function(e){var t=this.parentNode;S.inArray(this,i)<0&&(S.cleanData(ve(this)),t&&t.replaceChild(e,this))},i)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,r){S.fn[e]=function(e){for(var t,i=[],n=S(e),o=n.length-1,s=0;s<=o;s++)t=s===o?this:this.clone(!0),S(n[s])[r](t),l.apply(i,t.get());return this.pushStack(i)}});function qe(e,t,i){var n,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in n=i.call(e),t)e.style[o]=s[o];return n}var Pe,Ie,_e,ze,Be,Re,We,Qe,Ue=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Xe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=x),t.getComputedStyle(e)},Ve=new RegExp(ie.join("|"),"i");function Ye(){if(Qe){We.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Qe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(We).appendChild(Qe);var e=x.getComputedStyle(Qe);Pe="1%"!==e.top,Re=12===Ge(e.marginLeft),Qe.style.right="60%",ze=36===Ge(e.right),Ie=36===Ge(e.width),Qe.style.position="absolute",_e=12===Ge(Qe.offsetWidth/3),ne.removeChild(We),Qe=null}}function Ge(e){return Math.round(parseFloat(e))}function Ke(e,t,i){var n,o,s,r,a=e.style;return(i=i||Xe(e))&&(""!==(r=i.getPropertyValue(t)||i[t])||oe(e)||(r=S.style(e,t)),!y.pixelBoxStyles()&&Ue.test(r)&&Ve.test(t)&&(n=a.width,o=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=o,a.maxWidth=s)),void 0!==r?r+"":r}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}We=T.createElement("div"),(Qe=T.createElement("div")).style&&(Qe.style.backgroundClip="content-box",Qe.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Qe.style.backgroundClip,S.extend(y,{boxSizingReliable:function(){return Ye(),Ie},pixelBoxStyles:function(){return Ye(),ze},pixelPosition:function(){return Ye(),Pe},reliableMarginLeft:function(){return Ye(),Re},scrollboxSize:function(){return Ye(),_e},reliableTrDimensions:function(){var e,t,i,n;return null==Be&&(e=T.createElement("table"),t=T.createElement("tr"),i=T.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",ne.appendChild(e).appendChild(t).appendChild(i),n=x.getComputedStyle(t),Be=3<parseInt(n.height),ne.removeChild(e)),Be}}));var Ze=["Webkit","Moz","ms"],et=T.createElement("div").style,tt={};function it(e){var t=S.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=Ze.length;i--;)if((e=Ze[i]+t)in et)return e}(e)||e)}var nt=/^(none|table(?!-c[ea]).+)/,ot=/^--/,st={position:"absolute",visibility:"hidden",display:"block"},rt={letterSpacing:"0",fontWeight:"400"};function at(e,t,i){var n=te.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function lt(e,t,i,n,o,s){var r="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=S.css(e,i+ie[r],!0,o)),n?("content"===i&&(l-=S.css(e,"padding"+ie[r],!0,o)),"margin"!==i&&(l-=S.css(e,"border"+ie[r]+"Width",!0,o))):(l+=S.css(e,"padding"+ie[r],!0,o),"padding"!==i?l+=S.css(e,"border"+ie[r]+"Width",!0,o):a+=S.css(e,"border"+ie[r]+"Width",!0,o));return!n&&0<=s&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-a-.5))||0),l}function ct(e,t,i){var n=Xe(e),o=(!y.boxSizingReliable()||i)&&"border-box"===S.css(e,"boxSizing",!1,n),s=o,r=Ke(e,t,n),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(r)){if(!i)return r;r="auto"}return(!y.boxSizingReliable()&&o||!y.reliableTrDimensions()&&F(e,"tr")||"auto"===r||!parseFloat(r)&&"inline"===S.css(e,"display",!1,n))&&e.getClientRects().length&&(o="border-box"===S.css(e,"boxSizing",!1,n),(s=a in e)&&(r=e[a])),(r=parseFloat(r)||0)+lt(e,t,i||(o?"border":"content"),s,n,r)+"px"}function ut(e,t,i,n,o){return new ut.prototype.init(e,t,i,n,o)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Ke(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,s,r,a=U(t),l=ot.test(t),c=e.style;if(l||(t=it(a)),r=S.cssHooks[t]||S.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(o=r.get(e,!1,n))?o:c[t];"string"===(s=typeof i)&&(o=te.exec(i))&&o[1]&&(i=ae(e,t,o),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=o&&o[3]||(S.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==i||0!==t.indexOf("background")||(c[t]="inherit"),r&&"set"in r&&void 0===(i=r.set(e,i,n))||(l?c.setProperty(t,i):c[t]=i))}},css:function(e,t,i,n){var o,s,r,a=U(t);return ot.test(t)||(t=it(a)),(r=S.cssHooks[t]||S.cssHooks[a])&&"get"in r&&(o=r.get(e,!0,i)),void 0===o&&(o=Ke(e,t,n)),"normal"===o&&t in rt&&(o=rt[t]),""===i||i?(s=parseFloat(o),!0===i||isFinite(s)?s||0:o):o}}),S.each(["height","width"],function(e,l){S.cssHooks[l]={get:function(e,t,i){if(t)return!nt.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,i):qe(e,st,function(){return ct(e,l,i)})},set:function(e,t,i){var n,o=Xe(e),s=!y.scrollboxSize()&&"absolute"===o.position,r=(s||i)&&"border-box"===S.css(e,"boxSizing",!1,o),a=i?lt(e,l,i,r,o):0;return r&&s&&(a-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-lt(e,l,"border",!1,o)-.5)),a&&(n=te.exec(t))&&"px"!==(n[3]||"px")&&(e.style[l]=t,t=S.css(e,l)),at(0,t,a)}}}),S.cssHooks.marginLeft=Je(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ke(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(o,s){S.cssHooks[o+s]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[o+ie[t]+s]=n[t]||n[t-2]||n[0];return i}},"margin"!==o&&(S.cssHooks[o+s].set=at)}),S.fn.extend({css:function(e,t){return B(this,function(e,t,i){var n,o,s={},r=0;if(Array.isArray(t)){for(n=Xe(e),o=t.length;r<o;r++)s[t[r]]=S.css(e,t[r],!1,n);return s}return void 0!==i?S.style(e,t,i):S.css(e,t)},e,t,1<arguments.length)}}),((S.Tween=ut).prototype={constructor:ut,init:function(e,t,i,n,o,s){this.elem=e,this.prop=i,this.easing=o||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=s||(S.cssNumber[i]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,i=ut.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ut.propHooks._default.set(this),this}}).init.prototype=ut.prototype,(ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[it(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=ut.prototype.init,S.fx.step={};var dt,pt,ht,ft,gt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function mt(){pt&&(!1===T.hidden&&x.requestAnimationFrame?x.requestAnimationFrame(mt):x.setTimeout(mt,S.fx.interval),S.fx.tick())}function yt(){return x.setTimeout(function(){dt=void 0}),dt=Date.now()}function kt(e,t){var i,n=0,o={height:e};for(t=t?1:0;n<4;n+=2-t)o["margin"+(i=ie[n])]=o["padding"+i]=e;return t&&(o.opacity=o.width=e),o}function bt(e,t,i){for(var n,o=(Ct.tweeners[t]||[]).concat(Ct.tweeners["*"]),s=0,r=o.length;s<r;s++)if(n=o[s].call(i,t,e))return n}function Ct(s,e,t){var i,r,n=0,o=Ct.prefilters.length,a=S.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=dt||yt(),t=Math.max(0,c.startTime+c.duration-e),i=1-(t/c.duration||0),n=0,o=c.tweens.length;n<o;n++)c.tweens[n].run(i);return a.notifyWith(s,[c,i,t]),i<1&&o?t:(o||a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c]),!1)},c=a.promise({elem:s,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=S.Tween(s,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var t=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;t<i;t++)c.tweens[t].run(1);return e?(a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c,e])):a.rejectWith(s,[c,e]),this}}),u=c.props;for(!function(e,t){var i,n,o,s,r;for(i in e)if(o=t[n=U(i)],s=e[i],Array.isArray(s)&&(o=s[1],s=e[i]=s[0]),i!==n&&(e[n]=s,delete e[i]),(r=S.cssHooks[n])&&"expand"in r)for(i in s=r.expand(s),delete e[n],s)i in e||(e[i]=s[i],t[i]=o);else t[n]=o}(u,c.opts.specialEasing);n<o;n++)if(i=Ct.prefilters[n].call(c,s,u,c.opts))return k(i.stop)&&(S._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return S.map(u,bt,c),k(c.opts.start)&&c.opts.start.call(s,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),S.fx.timer(S.extend(l,{elem:s,anim:c,queue:c.opts.queue})),c}S.Animation=S.extend(Ct,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return ae(i.elem,e,te.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,o=(e=k(e)?(t=e,["*"]):e.match(O)).length;n<o;n++)i=e[n],Ct.tweeners[i]=Ct.tweeners[i]||[],Ct.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,o,s,r,a,l,c,u,d="width"in t||"height"in t,p=this,h={},f=e.style,g=e.nodeType&&re(e),v=Y.get(e,"fxshow");for(n in i.queue||(null==(r=S._queueHooks(e,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,p.always(function(){p.always(function(){r.unqueued--,S.queue(e,"fx").length||r.empty.fire()})})),t)if(o=t[n],gt.test(o)){if(delete t[n],s=s||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!v||void 0===v[n])continue;g=!0}h[n]=v&&v[n]||S.style(e,n)}if((l=!S.isEmptyObject(t))||!S.isEmptyObject(h))for(n in d&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=v&&v.display)&&(c=Y.get(e,"display")),"none"===(u=S.css(e,"display"))&&(c?u=c:(ce([e],!0),c=e.style.display||c,u=S.css(e,"display"),ce([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===S.css(e,"float")&&(l||(p.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,h)l||(v?"hidden"in v&&(g=v.hidden):v=Y.access(e,"fxshow",{display:c}),s&&(v.hidden=!g),g&&ce([e],!0),p.done(function(){for(n in g||ce([e]),Y.remove(e,"fxshow"),h)S.style(e,n,h[n])})),l=bt(g?v[n]:0,n,p),n in v||(v[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?Ct.prefilters.unshift(e):Ct.prefilters.push(e)}}),S.speed=function(e,t,i){var n=e&&"object"==typeof e?S.extend({},e):{complete:i||!i&&t||k(e)&&e,duration:e,easing:i&&t||t&&!k(t)&&t};return S.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in S.fx.speeds?n.duration=S.fx.speeds[n.duration]:n.duration=S.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){k(n.old)&&n.old.call(this),n.queue&&S.dequeue(this,n.queue)},n},S.fn.extend({fadeTo:function(e,t,i,n){return this.filter(re).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){function o(){var e=Ct(this,S.extend({},t),r);(s||Y.get(this,"finish"))&&e.stop(!0)}var s=S.isEmptyObject(t),r=S.speed(e,i,n);return o.finish=o,s||!1===r.queue?this.each(o):this.queue(r.queue,o)},stop:function(o,e,s){function r(e){var t=e.stop;delete e.stop,t(s)}return"string"!=typeof o&&(s=e,e=o,o=void 0),e&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",i=S.timers,n=Y.get(this);if(t)n[t]&&n[t].stop&&r(n[t]);else for(t in n)n[t]&&n[t].stop&&vt.test(t)&&r(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=o&&i[t].queue!==o||(i[t].anim.stop(s),e=!1,i.splice(t,1));!e&&s||S.dequeue(this,o)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var e,t=Y.get(this),i=t[r+"queue"],n=t[r+"queueHooks"],o=S.timers,s=i?i.length:0;for(t.finish=!0,S.queue(this,r,[]),n&&n.stop&&n.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===r&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),S.each(["toggle","show","hide"],function(e,n){var o=S.fn[n];S.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(kt(n,!0),e,t,i)}}),S.each({slideDown:kt("show"),slideUp:kt("hide"),slideToggle:kt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){S.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),S.timers=[],S.fx.tick=function(){var e,t=0,i=S.timers;for(dt=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||S.fx.stop(),dt=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){pt||(pt=!0,mt())},S.fx.stop=function(){pt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(n,e){return n=S.fx&&S.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=x.setTimeout(e,n);t.stop=function(){x.clearTimeout(i)}})},ht=T.createElement("input"),ft=T.createElement("select").appendChild(T.createElement("option")),ht.type="checkbox",y.checkOn=""!==ht.value,y.optSelected=ft.selected,(ht=T.createElement("input")).value="t",ht.type="radio",y.radioValue="t"===ht.value;var wt,xt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return B(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,i){var n,o,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?S.prop(e,t,i):(1===s&&S.isXMLDoc(e)||(o=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?wt:void 0)),void 0!==i?null===i?void S.removeAttr(e,t):o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:(e.setAttribute(t,i+""),i):o&&"get"in o&&null!==(n=o.get(e,t))?n:null==(n=S.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&F(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,o=t&&t.match(O);if(o&&1===e.nodeType)for(;i=o[n++];)e.removeAttribute(i)}}),wt={set:function(e,t,i){return!1===t?S.removeAttr(e,i):e.setAttribute(i,i),i}},S.each(S.expr.match.bool.source.match(/\w+/g),function(e,t){var r=xt[t]||S.find.attr;xt[t]=function(e,t,i){var n,o,s=t.toLowerCase();return i||(o=xt[s],xt[s]=n,n=null!=r(e,t,i)?s:null,xt[s]=o),n}});var Tt=/^(?:input|select|textarea|button)$/i,St=/^(?:a|area)$/i;function Lt(e){return(e.match(O)||[]).join(" ")}function Ft(e){return e.getAttribute&&e.getAttribute("class")||""}function $t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(O)||[]}S.fn.extend({prop:function(e,t){return B(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,i){var n,o,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&S.isXMLDoc(e)||(t=S.propFix[t]||t,o=S.propHooks[t]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:e[t]=i:o&&"get"in o&&null!==(n=o.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||St.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,i,n,o,s,r,a,l=0;if(k(t))return this.each(function(e){S(this).addClass(t.call(this,e,Ft(this)))});if((e=$t(t)).length)for(;i=this[l++];)if(o=Ft(i),n=1===i.nodeType&&" "+Lt(o)+" "){for(r=0;s=e[r++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o!==(a=Lt(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,o,s,r,a,l=0;if(k(t))return this.each(function(e){S(this).removeClass(t.call(this,e,Ft(this)))});if(!arguments.length)return this.attr("class","");if((e=$t(t)).length)for(;i=this[l++];)if(o=Ft(i),n=1===i.nodeType&&" "+Lt(o)+" "){for(r=0;s=e[r++];)for(;-1<n.indexOf(" "+s+" ");)n=n.replace(" "+s+" "," ");o!==(a=Lt(n))&&i.setAttribute("class",a)}return this},toggleClass:function(o,t){var s=typeof o,r="string"==s||Array.isArray(o);return"boolean"==typeof t&&r?t?this.addClass(o):this.removeClass(o):k(o)?this.each(function(e){S(this).toggleClass(o.call(this,e,Ft(this),t),t)}):this.each(function(){var e,t,i,n;if(r)for(t=0,i=S(this),n=$t(o);e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==o&&"boolean"!=s||((e=Ft(this))&&Y.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===o?"":Y.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+Lt(Ft(i))+" ").indexOf(t))return!0;return!1}});var Dt=/\r/g;S.fn.extend({val:function(i){var n,e,o,t=this[0];return arguments.length?(o=k(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=o?i.call(this,e,S(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=S.map(t,function(e){return null==e?"":e+""})),(n=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=S.valHooks[t.type]||S.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Dt,""):null==e?"":e:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:Lt(S.text(e))}},select:{get:function(e){var t,i,n,o=e.options,s=e.selectedIndex,r="select-one"===e.type,a=r?null:[],l=r?s+1:o.length;for(n=s<0?l:r?s:0;n<l;n++)if(((i=o[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!F(i.parentNode,"optgroup"))){if(t=S(i).val(),r)return t;a.push(t)}return a},set:function(e,t){for(var i,n,o=e.options,s=S.makeArray(t),r=o.length;r--;)((n=o[r]).selected=-1<S.inArray(S.valHooks.option.get(n),s))&&(i=!0);return i||(e.selectedIndex=-1),s}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},y.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in x;function jt(e){e.stopPropagation()}var At=/^(?:focusinfocus|focusoutblur)$/;S.extend(S.event,{trigger:function(e,t,i,n){var o,s,r,a,l,c,u,d,p=[i||T],h=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[];if(s=d=r=i=i||T,3!==i.nodeType&&8!==i.nodeType&&!At.test(h+S.event.triggered)&&(-1<h.indexOf(".")&&(h=(f=h.split(".")).shift(),f.sort()),l=h.indexOf(":")<0&&"on"+h,(e=e[S.expando]?e:new S.Event(h,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:S.makeArray(t,[e]),u=S.event.special[h]||{},n||!u.trigger||!1!==u.trigger.apply(i,t))){if(!n&&!u.noBubble&&!g(i)){for(a=u.delegateType||h,At.test(a+h)||(s=s.parentNode);s;s=s.parentNode)p.push(s),r=s;r===(i.ownerDocument||T)&&p.push(r.defaultView||r.parentWindow||x)}for(o=0;(s=p[o++])&&!e.isPropagationStopped();)d=s,e.type=1<o?a:u.bindType||h,(c=(Y.get(s,"events")||Object.create(null))[e.type]&&Y.get(s,"handle"))&&c.apply(s,t),(c=l&&s[l])&&c.apply&&X(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=h,n||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(p.pop(),t)||!X(i)||l&&k(i[h])&&!g(i)&&((r=i[l])&&(i[l]=null),S.event.triggered=h,e.isPropagationStopped()&&d.addEventListener(h,jt),i[h](),e.isPropagationStopped()&&d.removeEventListener(h,jt),S.event.triggered=void 0,r&&(i[l]=r)),e.result}},simulate:function(e,t,i){var n=S.extend(new S.Event,i,{type:e,isSimulated:!0});S.event.trigger(n,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return S.event.trigger(e,t,i,!0)}}),y.focusin||S.each({focus:"focusin",blur:"focusout"},function(i,n){function o(e){S.event.simulate(n,e.target,S.event.fix(e))}S.event.special[n]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,n);t||e.addEventListener(i,o,!0),Y.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,n)-1;t?Y.access(e,n,t):(e.removeEventListener(i,o,!0),Y.remove(e,n))}}});var Et=x.location,Mt={guid:Date.now()},Ht=/\?/;S.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new x.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+e),t};var Ot=/\[\]$/,Nt=/\r?\n/g,qt=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;function It(i,e,n,o){var t;if(Array.isArray(e))S.each(e,function(e,t){n||Ot.test(i)?o(i,t):It(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,o)});else if(n||"object"!==C(e))o(i,e);else for(t in e)It(i+"["+t+"]",e[t],n,o)}S.param=function(e,t){function i(e,t){var i=k(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)}var n,o=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){i(this.name,this.value)});else for(n in e)It(n,e[n],t,i);return o.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Pt.test(this.nodeName)&&!qt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var i=S(this).val();return null==i?null:Array.isArray(i)?S.map(i,function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}}):{name:t.name,value:i.replace(Nt,"\r\n")}}).get()}});var _t=/%20/g,zt=/#.*$/,Bt=/([?&])_=[^&]*/,Rt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,Qt=/^\/\//,Ut={},Xt={},Vt="*/".concat("*"),Yt=T.createElement("a");function Gt(s){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,o=e.toLowerCase().match(O)||[];if(k(t))for(;i=o[n++];)"+"===i[0]?(i=i.slice(1)||"*",(s[i]=s[i]||[]).unshift(t)):(s[i]=s[i]||[]).push(t)}}function Kt(t,o,s,r){var a={},l=t===Xt;function c(e){var n;return a[e]=!0,S.each(t[e]||[],function(e,t){var i=t(o,s,r);return"string"!=typeof i||l||a[i]?l?!(n=i):void 0:(o.dataTypes.unshift(i),c(i),!1)}),n}return c(o.dataTypes[0])||!a["*"]&&c("*")}function Jt(e,t){var i,n,o=S.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((o[i]?e:n=n||{})[i]=t[i]);return n&&S.extend(!0,e,n),e}Yt.href=Et.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,S.ajaxSettings),t):Jt(S.ajaxSettings,e)},ajaxPrefilter:Gt(Ut),ajaxTransport:Gt(Xt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,d,p,i,h,n,f,g,o,s,v=S.ajaxSetup({},t),m=v.context||v,y=v.context&&(m.nodeType||m.jquery)?S(m):S.event,k=S.Deferred(),b=S.Callbacks("once memory"),C=v.statusCode||{},r={},a={},l="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(f){if(!i)for(i={};t=Rt.exec(p);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?p:null},setRequestHeader:function(e,t){return null==f&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==f&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)w.always(e[w.status]);else for(t in e)C[t]=[C[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),c(0,t),this}};if(k.promise(w),v.url=((e||v.url||Et.href)+"").replace(Qt,Et.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(O)||[""],null==v.crossDomain){n=T.createElement("a");try{n.href=v.url,n.href=n.href,v.crossDomain=Yt.protocol+"//"+Yt.host!=n.protocol+"//"+n.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=S.param(v.data,v.traditional)),Kt(Ut,v,t,w),f)return w;for(o in(g=S.event&&v.global)&&0==S.active++&&S.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Wt.test(v.type),d=v.url.replace(zt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(_t,"+")):(s=v.url.slice(d.length),v.data&&(v.processData||"string"==typeof v.data)&&(d+=(Ht.test(d)?"&":"?")+v.data,delete v.data),!1===v.cache&&(d=d.replace(Bt,"$1"),s=(Ht.test(d)?"&":"?")+"_="+Mt.guid+++s),v.url=d+s),v.ifModified&&(S.lastModified[d]&&w.setRequestHeader("If-Modified-Since",S.lastModified[d]),S.etag[d]&&w.setRequestHeader("If-None-Match",S.etag[d])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&w.setRequestHeader("Content-Type",v.contentType),w.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+Vt+"; q=0.01":""):v.accepts["*"]),v.headers)w.setRequestHeader(o,v.headers[o]);if(v.beforeSend&&(!1===v.beforeSend.call(m,w,v)||f))return w.abort();if(l="abort",b.add(v.complete),w.done(v.success),w.fail(v.error),u=Kt(Xt,v,t,w)){if(w.readyState=1,g&&y.trigger("ajaxSend",[w,v]),f)return w;v.async&&0<v.timeout&&(h=x.setTimeout(function(){w.abort("timeout")},v.timeout));try{f=!1,u.send(r,c)}catch(e){if(f)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,i,n){var o,s,r,a,l,c=t;f||(f=!0,h&&x.clearTimeout(h),u=void 0,p=n||"",w.readyState=0<e?4:0,o=200<=e&&e<300||304===e,i&&(a=function(e,t,i){for(var n,o,s,r,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||e.converters[o+" "+l[0]]){s=o;break}r=r||o}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(v,w,i)),!o&&-1<S.inArray("script",v.dataTypes)&&(v.converters["text script"]=function(){}),a=function(e,t,i,n){var o,s,r,a,l,c={},u=e.dataTypes.slice();if(u[1])for(r in e.converters)c[r.toLowerCase()]=e.converters[r];for(s=u.shift();s;)if(e.responseFields[s]&&(i[e.responseFields[s]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=u.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if((a=o.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],u.unshift(a[1]));break}if(!0!==r)if(r&&e.throws)t=r(t);else try{t=r(t)}catch(e){return{state:"parsererror",error:r?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(v,a,w,o),o?(v.ifModified&&((l=w.getResponseHeader("Last-Modified"))&&(S.lastModified[d]=l),(l=w.getResponseHeader("etag"))&&(S.etag[d]=l)),204===e||"HEAD"===v.type?c="nocontent":304===e?c="notmodified":(c=a.state,s=a.data,o=!(r=a.error))):(r=c,!e&&c||(c="error",e<0&&(e=0))),w.status=e,w.statusText=(t||c)+"",o?k.resolveWith(m,[s,c,w]):k.rejectWith(m,[w,c,r]),w.statusCode(C),C=void 0,g&&y.trigger(o?"ajaxSuccess":"ajaxError",[w,v,o?s:r]),b.fireWith(m,[w,c]),g&&(y.trigger("ajaxComplete",[w,v]),--S.active||S.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,i){return S.get(e,t,i,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],function(e,o){S[o]=function(e,t,i,n){return k(t)&&(n=n||i,i=t,t=void 0),S.ajax(S.extend({url:e,type:o,dataType:n,data:t,success:i},S.isPlainObject(e)&&e))}}),S.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),S._evalUrl=function(e,t,i){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,i)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(k(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return k(i)?this.each(function(e){S(this).wrapInner(i.call(this,e))}):this.each(function(){var e=S(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=k(t);return this.each(function(e){S(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new x.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},ei=S.ajaxSettings.xhr();y.cors=!!ei&&"withCredentials"in ei,y.ajax=ei=!!ei,S.ajaxTransport(function(o){var s,r;if(y.cors||ei&&!o.crossDomain)return{send:function(e,t){var i,n=o.xhr();if(n.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(i in o.xhrFields)n[i]=o.xhrFields[i];for(i in o.mimeType&&n.overrideMimeType&&n.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);s=function(e){return function(){s&&(s=r=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(Zt[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=s(),r=n.onerror=n.ontimeout=s("error"),void 0!==n.onabort?n.onabort=r:n.onreadystatechange=function(){4===n.readyState&&x.setTimeout(function(){s&&r()})},s=s("abort");try{n.send(o.hasContent&&o.data||null)}catch(e){if(s)throw e}},abort:function(){s&&s()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),S.ajaxTransport("script",function(i){var n,o;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){n=S("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",o=function(e){n.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),T.head.appendChild(n[0])},abort:function(){o&&o()}}});var ti,ii=[],ni=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ii.pop()||S.expando+"_"+Mt.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",function(e,t,i){var n,o,s,r=!1!==e.jsonp&&(ni.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ni.test(e.data)&&"data");if(r||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=k(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,r?e[r]=e[r].replace(ni,"$1"+n):!1!==e.jsonp&&(e.url+=(Ht.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return s||S.error(n+" was not called"),s[0]},e.dataTypes[0]="json",o=x[n],x[n]=function(){s=arguments},i.always(function(){void 0===o?S(x).removeProp(n):x[n]=o,e[n]&&(e.jsonpCallback=t.jsonpCallback,ii.push(n)),s&&k(o)&&o(s[0]),s=o=void 0}),"script"}),y.createHTMLDocument=((ti=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),S.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(y.createHTMLDocument?((n=(t=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,t.head.appendChild(n)):t=T),s=!i&&[],(o=$.exec(e))?[t.createElement(o[1])]:(o=ke([e],t,s),s&&s.length&&S(s).remove(),S.merge([],o.childNodes)));var n,o,s},S.fn.load=function(e,t,i){var n,o,s,r=this,a=e.indexOf(" ");return-1<a&&(n=Lt(e.slice(a)),e=e.slice(0,a)),k(t)?(i=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<r.length&&S.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){s=arguments,r.html(n?S("<div>").append(S.parseHTML(e)).find(n):e)}).always(i&&function(e,t){r.each(function(){i.apply(this,s||[e.responseText,t,e])})}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(e,t,i){var n,o,s,r,a,l,c=S.css(e,"position"),u=S(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),s=S.css(e,"top"),l=S.css(e,"left"),o=("absolute"===c||"fixed"===c)&&-1<(s+l).indexOf("auto")?(r=(n=u.position()).top,n.left):(r=parseFloat(s)||0,parseFloat(l)||0),k(t)&&(t=t.call(e,i,S.extend({},a))),null!=t.top&&(d.top=t.top-a.top+r),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],o={top:0,left:0};if("fixed"===S.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((o=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),o.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-S.css(n,"marginTop",!0),left:t.left-o.left-S.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||ne})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var s="pageYOffset"===o;S.fn[t]=function(e){return B(this,function(e,t,i){var n;if(g(e)?n=e:9===e.nodeType&&(n=e.defaultView),void 0===i)return n?n[o]:e[t];n?n.scrollTo(s?n.pageXOffset:i,s?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),S.each(["top","left"],function(e,i){S.cssHooks[i]=Je(y.pixelPosition,function(e,t){if(t)return t=Ke(e,i),Ue.test(t)?S(e).position()[i]+"px":t})}),S.each({Height:"height",Width:"width"},function(r,a){S.each({padding:"inner"+r,content:a,"":"outer"+r},function(n,s){S.fn[s]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),o=n||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,i){var n;return g(e)?0===s.indexOf("outer")?e["inner"+r]:e.document.documentElement["client"+r]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+r],n["scroll"+r],e.body["offset"+r],n["offset"+r],n["client"+r])):void 0===i?S.css(e,t,o):S.style(e,t,i,o)},a,i?e:void 0,i)}})}),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){S.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}});var oi=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var i,n,o;if("string"==typeof t&&(i=e[t],t=e,e=i),k(e))return n=a.call(arguments,2),(o=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||S.guid++,o},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=F,S.isFunction=k,S.isWindow=g,S.camelCase=U,S.type=C,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(oi,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S});var si=x.jQuery,ri=x.$;return S.noConflict=function(e){return x.$===S&&(x.$=ri),e&&x.jQuery===S&&(x.jQuery=si),S},void 0===e&&(x.jQuery=x.$=S),S}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e($||require("jquery")):e(jQuery)}(function(N){"use strict";var o="styler",n={idSuffix:"-styler",filePlaceholder:"Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½",fileBrowse:"ÐÐ±Ð·Ð¾Ñ...",fileNumber:"ÐÑÐ±ÑÐ°Ð½Ð¾ ÑÐ°Ð¹Ð»Ð¾Ð²: %s",selectPlaceholder:"ÐÑÐ±ÐµÑÐ¸ÑÐµ...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Ð¡Ð¾Ð²Ð¿Ð°Ð´ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾",selectSearchPlaceholder:"ÐÐ¾Ð¸ÑÐº...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};function s(e,t){this.element=e,this.options=N.extend({},n,t);var i=this.options.locale;void 0!==this.options.locales[i]&&N.extend(this.options,this.options.locales[i]),this.init()}function q(e){if(!N(e.target).parents().hasClass("jq-selectbox")&&"OPTION"!=e.target.nodeName&&N("div.jq-selectbox.opened").length){var t=N("div.jq-selectbox.opened"),i=N("div.jq-selectbox__search input",t),n=N("div.jq-selectbox__dropdown",t);t.find("select").data("_"+o).options.onSelectClosed.call(t),i.length&&i.val("").keyup(),n.hide().find("li.sel").addClass("selected"),t.removeClass("focused opened dropup dropdown")}}s.prototype={init:function(){var E=N(this.element),M=this.options,H=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),e=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));function O(){void 0!==E.attr("id")&&""!==E.attr("id")&&(this.id=E.attr("id")+M.idSuffix),this.title=E.attr("title"),this.classes=E.attr("class"),this.data=E.data()}if(E.is(":checkbox")){var t=function(){var e=new O,t=N('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);E.after(t).prependTo(t),E.is(":checked")&&t.addClass("checked"),E.is(":disabled")&&t.addClass("disabled"),t.click(function(e){e.preventDefault(),E.triggerHandler("click"),t.is(".disabled")||(E.is(":checked")?(E.prop("checked",!1),t.removeClass("checked")):(E.prop("checked",!0),t.addClass("checked")),E.focus().change())}),E.closest("label").add('label[for="'+E.attr("id")+'"]').on("click.styler",function(e){N(e.target).is("a")||N(e.target).closest(t).length||(t.triggerHandler("click"),e.preventDefault())}),E.on("change.styler",function(){E.is(":checked")?t.addClass("checked"):t.removeClass("checked")}).on("keydown.styler",function(e){32==e.which&&t.click()}).on("focus.styler",function(){t.is(".disabled")||t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")})};t(),E.on("refresh",function(){E.closest("label").add('label[for="'+E.attr("id")+'"]').off(".styler"),E.off(".styler").parent().before(E).remove(),t()})}else if(E.is(":radio")){var i=function(){var e=new O,i=N('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);E.after(i).prependTo(i),E.is(":checked")&&i.addClass("checked"),E.is(":disabled")&&i.addClass("disabled"),N.fn.commonParents=function(){var e=this;return e.first().parents().filter(function(){return N(this).find(e).length===e.length})},N.fn.commonParent=function(){return N(this).commonParents().first()},i.click(function(e){if(e.preventDefault(),E.triggerHandler("click"),!i.is(".disabled")){var t=N('input[name="'+E.attr("name")+'"]');t.commonParent().find(t).prop("checked",!1).parent().removeClass("checked"),E.prop("checked",!0).parent().addClass("checked"),E.focus().change()}}),E.closest("label").add('label[for="'+E.attr("id")+'"]').on("click.styler",function(e){N(e.target).is("a")||N(e.target).closest(i).length||(i.triggerHandler("click"),e.preventDefault())}),E.on("change.styler",function(){E.parent().addClass("checked")}).on("focus.styler",function(){i.is(".disabled")||i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")})};i(),E.on("refresh",function(){E.closest("label").add('label[for="'+E.attr("id")+'"]').off(".styler"),E.off(".styler").parent().before(E).remove(),i()})}else if(E.is(":file")){var n=function(){var e=new O,n=E.data("placeholder");void 0===n&&(n=M.filePlaceholder);var t=E.data("browse");void 0!==t&&""!==t||(t=M.fileBrowse);var o=N('<div class="jq-file"><div class="jq-file__name">'+n+'</div><div class="jq-file__browse">'+t+"</div></div>").attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);E.after(o).appendTo(o),E.is(":disabled")&&o.addClass("disabled");var i=E.val(),s=N("div.jq-file__name",o);i&&s.text(i.replace(/.+[\\\/]/,"")),E.on("change.styler",function(){var e=E.val();if(E.is("[multiple]")){e="";var t=E[0].files.length;if(0<t){var i=E.data("number");void 0===i&&(i=M.fileNumber),e=i=i.replace("%s",t)}}s.text(e.replace(/.+[\\\/]/,"")),""===e?(s.text(n),o.removeClass("changed")):o.addClass("changed")}).on("focus.styler",function(){o.addClass("focused")}).on("blur.styler",function(){o.removeClass("focused")}).on("click.styler",function(){o.removeClass("focused")})};n(),E.on("refresh",function(){E.off(".styler").parent().before(E).remove(),n()})}else if(E.is('input[type="number"]')){var o=function(){var e=new O,t=N('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);E.after(t).prependTo(t).wrap('<div class="jq-number__field"></div>'),E.is(":disabled")&&t.addClass("disabled");var s,r,a,i=null,n=null;void 0!==E.attr("min")&&(s=E.attr("min")),void 0!==E.attr("max")&&(r=E.attr("max")),a=void 0!==E.attr("step")&&N.isNumeric(E.attr("step"))?Number(E.attr("step")):Number(1);function o(e){var t,i=E.val();N.isNumeric(i)||(i=0,E.val("0")),e.is(".minus")?t=Number(i)-a:e.is(".plus")&&(t=Number(i)+a);var n=(a.toString().split(".")[1]||[]).length;if(0<n){for(var o="1";o.length<=n;)o+="0";t=Math.round(t*o)/o}N.isNumeric(s)&&N.isNumeric(r)?s<=t&&t<=r&&E.val(t):N.isNumeric(s)&&!N.isNumeric(r)?s<=t&&E.val(t):!N.isNumeric(s)&&N.isNumeric(r)?t<=r&&E.val(t):E.val(t)}t.is(".disabled")||(t.on("mousedown","div.jq-number__spin",function(){var e=N(this);o(e),i=setTimeout(function(){n=setInterval(function(){o(e)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(i),clearInterval(n)}).on("mouseup","div.jq-number__spin",function(){E.change().trigger("input")}),E.on("focus.styler",function(){t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")}))};o(),E.on("refresh",function(){E.off(".styler").closest(".jq-number").before(E).remove(),o()})}else if(E.is("select")){var s=function(){function $(t){var i=t.prop("scrollHeight")-t.outerHeight(),n=null,o=null;t.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(e){n=e.originalEvent.detail<0||0<e.originalEvent.wheelDelta?1:-1,o=t.scrollTop(),(i<=o&&n<0||o<=0&&0<n)&&(e.stopPropagation(),e.preventDefault())})}var D=N("option",E),j="";function A(){for(var e=0;e<D.length;e++){var t=D.eq(e),i="",n="",o="",s="",r="",a="",l="",c="",u="";t.prop("selected")&&(n="selected sel"),t.is(":disabled")&&(n="disabled"),t.is(":selected:disabled")&&(n="selected sel disabled"),void 0!==t.attr("id")&&""!==t.attr("id")&&(s=' id="'+t.attr("id")+M.idSuffix+'"'),void 0!==t.attr("title")&&""!==D.attr("title")&&(r=' title="'+t.attr("title")+'"'),void 0!==t.attr("class")&&(l=" "+t.attr("class"),u=' data-jqfs-class="'+t.attr("class")+'"');var d=t.data();for(var p in d)""!==d[p]&&(a+=" data-"+p+'="'+d[p]+'"');n+l!==""&&(o=' class="'+n+l+'"'),i="<li"+u+a+o+r+s+">"+t.html()+"</li>",t.parent().is("optgroup")&&(void 0!==t.parent().attr("class")&&(c=" "+t.parent().attr("class")),i="<li"+u+a+' class="'+n+l+" option"+c+'"'+r+s+">"+t.html()+"</li>",t.is(":first-child")&&(i='<li class="optgroup'+c+'">'+t.parent().attr("label")+"</li>"+i)),j+=i}}if(E.is("[multiple]")){if(e||H)return;!function(){var e=new O,t=N('<div class="jq-select-multiple jqselect"></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);E.after(t),A(),t.append("<ul>"+j+"</ul>");var i=N("ul",t),o=N("li",t),n=E.attr("size"),s=i.outerHeight(),r=o.outerHeight();void 0!==n&&0<n?i.css({height:r*n}):i.css({height:4*r}),s>t.height()&&(i.css("overflowY","scroll"),$(i),o.filter(".selected").length&&i.scrollTop(i.scrollTop()+o.filter(".selected").position().top)),E.prependTo(t),E.is(":disabled")?(t.addClass("disabled"),D.each(function(){N(this).is(":selected")&&o.eq(N(this).index()).addClass("selected")})):(o.filter(":not(.disabled):not(.optgroup)").click(function(e){E.focus();var t=N(this);if(e.ctrlKey||e.metaKey||t.addClass("selected"),e.shiftKey||t.addClass("first"),e.ctrlKey||e.metaKey||e.shiftKey||t.siblings().removeClass("selected first"),(e.ctrlKey||e.metaKey)&&(t.is(".selected")?t.removeClass("selected first"):t.addClass("selected first"),t.siblings().removeClass("first")),e.shiftKey){var i=!1,n=!1;t.siblings().removeClass("selected").siblings(".first").addClass("selected"),t.prevAll().each(function(){N(this).is(".first")&&(i=!0)}),t.nextAll().each(function(){N(this).is(".first")&&(n=!0)}),i&&t.prevAll().each(function(){if(N(this).is(".selected"))return!1;N(this).not(".disabled, .optgroup").addClass("selected")}),n&&t.nextAll().each(function(){if(N(this).is(".selected"))return!1;N(this).not(".disabled, .optgroup").addClass("selected")}),1==o.filter(".selected").length&&t.addClass("first")}D.prop("selected",!1),o.filter(".selected").each(function(){var e=N(this),t=e.index();e.is(".option")&&(t-=e.prevAll(".optgroup").length),D.eq(t).prop("selected",!0)}),E.change()}),D.each(function(e){N(this).data("optionIndex",e)}),E.on("change.styler",function(){o.removeClass("selected");var t=[];D.filter(":selected").each(function(){t.push(N(this).data("optionIndex"))}),o.not(".optgroup").filter(function(e){return-1<N.inArray(e,t)}).addClass("selected")}).on("focus.styler",function(){t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")}),s>t.height()&&E.on("keydown.styler",function(e){38!=e.which&&37!=e.which&&33!=e.which||i.scrollTop(i.scrollTop()+o.filter(".selected").position().top-r),40!=e.which&&39!=e.which&&34!=e.which||i.scrollTop(i.scrollTop()+o.filter(".selected:last").position().top-i.innerHeight()+2*r)}))}()}else!function(){var e=new O,t="",i=E.data("placeholder"),n=E.data("search"),o=E.data("search-limit"),s=E.data("search-not-found"),r=E.data("search-placeholder"),l=E.data("smart-positioning");void 0===i&&(i=M.selectPlaceholder),void 0!==n&&""!==n||(n=M.selectSearch),void 0!==o&&""!==o||(o=M.selectSearchLimit),void 0!==s&&""!==s||(s=M.selectSearchNotFound),void 0===r&&(r=M.selectSearchPlaceholder),void 0!==l&&""!==l||(l=M.selectSmartPositioning);var c=N('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);E.after(c).prependTo(c);var u=c.css("z-index");u=0<u?u:1;var a=N("div.jq-selectbox__select",c),d=N("div.jq-selectbox__select-text",c),p=D.filter(":selected");A(),n&&(t='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+r+'"></div><div class="jq-selectbox__not-found">'+s+"</div>");var h=N('<div class="jq-selectbox__dropdown">'+t+"<ul>"+j+"</ul></div>");c.append(h);var f=N("ul",h),g=N("li",h),v=N("input",h),m=N("div.jq-selectbox__not-found",h).hide();g.length<o&&v.parent().hide(),""===D.first().text()&&D.first().is(":selected")&&!1!==i?d.text(i).addClass("placeholder"):d.text(p.text());var y=0,k=0;if(g.css({display:"inline-block"}),g.each(function(){var e=N(this);e.innerWidth()>y&&(y=e.innerWidth(),k=e.width())}),g.css({display:""}),d.is(".placeholder")&&d.width()>y)d.width(d.width());else{var b=c.clone().appendTo("body").width("auto"),C=b.outerWidth();b.remove(),C==c.outerWidth()&&d.width(k)}y>c.width()&&h.width(y),""===D.first().text()&&""!==E.data("placeholder")&&g.first().hide();var w=c.outerHeight(!0),x=v.parent().outerHeight(!0)||0,T=f.css("max-height"),S=g.filter(".selected");if(S.length<1&&g.first().addClass("selected sel"),void 0===g.data("li-height")){var L=g.outerHeight();!1!==i&&(L=g.eq(1).outerHeight()),g.data("li-height",L)}var F=h.css("top");if("auto"==h.css("left")&&h.css({left:0}),"auto"==h.css("top")&&(h.css({top:w}),F=w),h.hide(),S.length&&(D.first().text()!=p.text()&&c.addClass("changed"),c.data("jqfs-class",S.data("jqfs-class")),c.addClass(S.data("jqfs-class"))),E.is(":disabled"))c.addClass("disabled");else{a.click(function(){if(N("div.jq-selectbox").filter(".opened").length&&M.onSelectClosed.call(N("div.jq-selectbox").filter(".opened")),E.focus(),!H){var t=N(window),i=g.data("li-height"),n=c.offset().top,o=t.height()-w-(n-t.scrollTop()),e=E.data("visible-options");void 0!==e&&""!==e||(e=M.selectVisibleOptions);var s=5*i,r=i*e;0<e&&e<6&&(s=r),0===e&&(r="auto");var a=function(){h.height("auto").css({bottom:"auto",top:F});function e(){f.css("max-height",Math.floor((o-20-x)/i)*i)}e(),f.css("max-height",r),"none"!=T&&f.css("max-height",T),o<h.outerHeight()+20&&e()};!0===l||1===l?s+x+20<o?(a(),c.removeClass("dropup").addClass("dropdown")):(function(){h.height("auto").css({top:"auto",bottom:F});function e(){f.css("max-height",Math.floor((n-t.scrollTop()-20-x)/i)*i)}e(),f.css("max-height",r),"none"!=T&&f.css("max-height",T),n-t.scrollTop()-20<h.outerHeight()+20&&e()}(),c.removeClass("dropdown").addClass("dropup")):!1===l||0===l?s+x+20<o&&(a(),c.removeClass("dropup").addClass("dropdown")):(h.height("auto").css({bottom:"auto",top:F}),f.css("max-height",r),"none"!=T&&f.css("max-height",T)),c.offset().left+h.outerWidth()>t.width()&&h.css({left:"auto",right:0}),N("div.jqselect").css({zIndex:u-1}).removeClass("opened"),c.css({zIndex:u}),h.is(":hidden")?(N("div.jq-selectbox__dropdown:visible").hide(),h.show(),c.addClass("opened focused"),M.onSelectOpened.call(c)):(h.hide(),c.removeClass("opened dropup dropdown"),N("div.jq-selectbox").filter(".opened").length&&M.onSelectClosed.call(c)),v.length&&(v.val("").keyup(),m.hide(),v.keyup(function(){var e=N(this).val();g.each(function(){N(this).html().match(new RegExp(".*?"+e+".*?","i"))?N(this).show():N(this).hide()}),""===D.first().text()&&""!==E.data("placeholder")&&g.first().hide(),g.filter(":visible").length<1?m.show():m.hide()})),g.filter(".selected").length&&(""===E.val()?f.scrollTop(0):(f.innerHeight()/i%2!=0&&(i/=2),f.scrollTop(f.scrollTop()+g.filter(".selected").position().top-f.innerHeight()/2+i))),$(f)}}),g.hover(function(){N(this).siblings().removeClass("selected")});g.filter(".selected").text();g.filter(":not(.disabled):not(.optgroup)").click(function(){E.focus();var e=N(this),t=e.text();if(!e.is(".selected")){var i=e.index();i-=e.prevAll(".optgroup").length,e.addClass("selected sel").siblings().removeClass("selected sel"),D.prop("selected",!1).eq(i).prop("selected",!0),d.text(t),c.data("jqfs-class")&&c.removeClass(c.data("jqfs-class")),c.data("jqfs-class",e.data("jqfs-class")),c.addClass(e.data("jqfs-class")),E.change()}h.hide(),c.removeClass("opened dropup dropdown"),M.onSelectClosed.call(c)}),h.mouseout(function(){N("li.sel",h).addClass("selected")}),E.on("change.styler",function(){d.text(D.filter(":selected").text()).removeClass("placeholder"),g.removeClass("selected sel").not(".optgroup").eq(E[0].selectedIndex).addClass("selected sel"),D.first().text()!=g.filter(".selected").text()?c.addClass("changed"):c.removeClass("changed")}).on("focus.styler",function(){c.addClass("focused"),N("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){c.removeClass("focused")}).on("keydown.styler keyup.styler",function(e){var t=g.data("li-height");""===E.val()?d.text(i).addClass("placeholder"):d.text(D.filter(":selected").text()),g.removeClass("selected sel").not(".optgroup").eq(E[0].selectedIndex).addClass("selected sel"),38!=e.which&&37!=e.which&&33!=e.which&&36!=e.which||(""===E.val()?f.scrollTop(0):f.scrollTop(f.scrollTop()+g.filter(".selected").position().top)),40!=e.which&&39!=e.which&&34!=e.which&&35!=e.which||f.scrollTop(f.scrollTop()+g.filter(".selected").position().top-f.innerHeight()+t),13==e.which&&(e.preventDefault(),h.hide(),c.removeClass("opened dropup dropdown"),M.onSelectClosed.call(c))}).on("keydown.styler",function(e){32==e.which&&(e.preventDefault(),a.click())}),q.registered||(N(document).on("click",q),q.registered=!0)}}()};s(),E.on("refresh",function(){E.off(".styler").parent().before(E).remove(),s()})}else E.is(":reset")&&E.on("click",function(){setTimeout(function(){E.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var e=N(this.element);e.is(":checkbox")||e.is(":radio")?(e.removeData("_"+o).off(".styler refresh").removeAttr("style").parent().before(e).remove(),e.closest("label").add('label[for="'+e.attr("id")+'"]').off(".styler")):e.is('input[type="number"]')?e.removeData("_"+o).off(".styler refresh").closest(".jq-number").before(e).remove():(e.is(":file")||e.is("select"))&&e.removeData("_"+o).off(".styler refresh").removeAttr("style").parent().before(e).remove()}},N.fn[o]=function(t){var i,n=arguments;return void 0===t||"object"==typeof t?(this.each(function(){N.data(this,"_"+o)||N.data(this,"_"+o,new s(this,t))}).promise().done(function(){var e=N(this[0]).data("_"+o);e&&e.options.onFormStyled.call()}),this):"string"==typeof t&&"_"!==t[0]&&"init"!==t?(this.each(function(){var e=N.data(this,"_"+o);e instanceof s&&"function"==typeof e[t]&&(i=e[t].apply(e,Array.prototype.slice.call(n,1)))}),void 0!==i?i:this):void 0},q.registered=!1}),$(document).ready(function(){var e;(e=$(".clock").FlipClock({clockFace:"DailyCounter",autoStart:!1,callbacks:{stop:function(){$(".message").html("The clock has stopped!")}}})).setTime(220880),e.setCountdown(!0),e.start()}),(Base=function(){}).extend=function(e,t){"use strict";var i=Base.prototype.extend;Base._prototyping=!0;var n=new this;i.call(n,e),n.base=function(){},delete Base._prototyping;var o=n.constructor,s=n.constructor=function(){if(!Base._prototyping)if(this._constructing||this.constructor==s)this._constructing=!0,o.apply(this,arguments),delete this._constructing;else if(null!==arguments[0])return(arguments[0].extend||i).call(arguments[0],n)};return s.ancestor=this,s.extend=this.extend,s.forEach=this.forEach,s.implement=this.implement,s.prototype=n,s.toString=this.toString,s.valueOf=function(e){return"object"==e?s:o.valueOf()},i.call(s,t),"function"==typeof s.init&&s.init(),s},Base.prototype={extend:function(e,t){if(1<arguments.length){var i=this[e];if(i&&"function"==typeof t&&(!i.valueOf||i.valueOf()!=t.valueOf())&&/\bbase\b/.test(t)){var n=t.valueOf();(t=function(){var e=this.base||Base.prototype.base;this.base=i;var t=n.apply(this,arguments);return this.base=e,t}).valueOf=function(e){return"object"==e?t:n},t.toString=Base.toString}this[e]=t}else if(e){var o=Base.prototype.extend;Base._prototyping||"function"==typeof this||(o=this.extend||o);for(var s={toSource:null},r=["constructor","toString","valueOf"],a=Base._prototyping?0:1;l=r[a++];)e[l]!=s[l]&&o.call(this,l,e[l]);for(var l in e)s[l]||o.call(this,l,e[l])}return this}},Base=Base.extend({constructor:function(){this.extend(arguments[0])}},{ancestor:Object,version:"1.1",forEach:function(e,t,i){for(var n in e)void 0===this.prototype[n]&&t.call(i,e[n],n,e)},implement:function(){for(var e=0;e<arguments.length;e++)"function"==typeof arguments[e]?arguments[e](this.prototype):this.prototype.extend(arguments[e]);return this},toString:function(){return String(this.valueOf())}}),function(i){"use strict";(FlipClock=function(e,t,i){return t instanceof Object&&t instanceof Date==!1&&(i=t,t=0),new FlipClock.Factory(e,t,i)}).Lang={},FlipClock.Base=Base.extend({buildDate:"2014-10-06",version:"0.7.3",constructor:function(e,t){"object"!=typeof e&&(e={}),"object"!=typeof t&&(t={}),this.setOptions(i.extend(!0,{},e,t))},callback:function(e){if("function"==typeof e){for(var t=[],i=1;i<=arguments.length;i++)arguments[i]&&t.push(arguments[i]);e.apply(this,t)}},log:function(e){window.console&&console.log&&console.log(e)},getOption:function(e){return!!this[e]&&this[e]},getOptions:function(){return this},setOption:function(e,t){this[e]=t},setOptions:function(e){for(var t in e)void 0!==e[t]&&this.setOption(t,e[t])}})}(jQuery),function(r){"use strict";FlipClock.Face=FlipClock.Base.extend({autoStart:!0,dividers:[],factory:!1,lists:[],constructor:function(e,t){this.dividers=[],this.lists=[],this.base(t),this.factory=e},build:function(){this.autoStart&&this.start()},createDivider:function(e,t,i){"boolean"!=typeof t&&t||(i=t,t=e);var n=['<span class="'+this.factory.classes.dot+' top"></span>','<span class="'+this.factory.classes.dot+' bottom"></span>'].join("");i&&(n=""),e=this.factory.localize(e);var o=['<span class="'+this.factory.classes.divider+" "+(t||"").toLowerCase()+'">','<span class="'+this.factory.classes.label+'">'+(e||"")+"</span>",n,"</span>"],s=r(o.join(""));return this.dividers.push(s),s},createList:function(e,t){"object"==typeof e&&(t=e,e=0);var i=new FlipClock.List(this.factory,e,t);return this.lists.push(i),i},reset:function(){this.factory.time=new FlipClock.Time(this.factor,this.factory.original?Math.round(this.factory.original):0,{minimumDigits:this.factory.minimumDigits}),this.flip(this.factory.original,!1)},appendDigitToClock:function(e){e.$el.append(!1)},addDigit:function(e){var t=this.createList(e,{classes:{active:this.factory.classes.active,before:this.factory.classes.before,flip:this.factory.classes.flip}});this.appendDigitToClock(t)},start:function(){},stop:function(){},autoIncrement:function(){this.factory.countdown?this.decrement():this.increment()},increment:function(){this.factory.time.addSecond()},decrement:function(){0==this.factory.time.getTimeSeconds()?this.factory.stop():this.factory.time.subSecond()},flip:function(e,n){var o=this;r.each(e,function(e,t){var i=o.lists[e];i?(n||t==i.digit||i.play(),i.select(t)):o.addDigit(t)})}})}(jQuery),function(n){"use strict";FlipClock.Factory=FlipClock.Base.extend({animationRate:1e3,autoStart:!0,callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},classes:{active:"flip-clock-active",before:"flip-clock-before",divider:"flip-clock-divider",dot:"flip-clock-dot",label:"flip-clock-label",flip:"flip",play:"play",wrapper:"flip-clock-wrapper"},clockFace:"HourlyCounter",countdown:!1,defaultClockFace:"HourlyCounter",defaultLanguage:"english",$el:!1,face:!0,lang:!1,language:"english",minimumDigits:0,original:!1,running:!1,time:!1,timer:!1,$wrapper:!1,constructor:function(e,t,i){i=i||{},this.lists=[],this.running=!1,this.base(i),this.$el=n(e).addClass(this.classes.wrapper),this.$wrapper=this.$el,this.original=t instanceof Date?t:t?Math.round(t):0,this.time=new FlipClock.Time(this,this.original,{minimumDigits:this.minimumDigits,animationRate:this.animationRate}),this.timer=new FlipClock.Timer(this,i),this.loadLanguage(this.language),this.loadClockFace(this.clockFace,i),this.autoStart&&this.start()},loadClockFace:function(e,t){var i,n=!1;return e=e.ucfirst()+"Face",this.face.stop&&(this.stop(),n=!0),this.$el.html(""),this.time.minimumDigits=this.minimumDigits,(i=FlipClock[e]?new FlipClock[e](this,t):new FlipClock[this.defaultClockFace+"Face"](this,t)).build(),this.face=i,n&&this.start(),this.face},loadLanguage:function(e){var t;return t=FlipClock.Lang[e.ucfirst()]?FlipClock.Lang[e.ucfirst()]:FlipClock.Lang[e]?FlipClock.Lang[e]:FlipClock.Lang[this.defaultLanguage],this.lang=t},localize:function(e,t){var i=this.lang;if(!e)return null;var n=e.toLowerCase();return"object"==typeof t&&(i=t),i&&i[n]?i[n]:e},start:function(e){var t=this;t.running||t.countdown&&!(t.countdown&&0<t.time.time)?t.log("Trying to start timer when countdown already at 0"):(t.face.start(t.time),t.timer.start(function(){t.flip(),"function"==typeof e&&e()}))},stop:function(e){for(var t in this.face.stop(),this.timer.stop(e),this.lists)this.lists.hasOwnProperty(t)&&this.lists[t].stop()},reset:function(e){this.timer.reset(e),this.face.reset()},setTime:function(e){this.time.time=e,this.flip(!0)},getTime:function(e){return this.time},setCountdown:function(e){var t=this.running;this.countdown=!!e,t&&(this.stop(),this.start())},flip:function(e){this.face.flip(!1,e)}})}(jQuery),function(t){"use strict";FlipClock.List=FlipClock.Base.extend({digit:0,classes:{active:"flip-clock-active",before:"flip-clock-before",flip:"flip"},factory:!1,$el:!1,$obj:!1,items:[],lastDigit:0,constructor:function(e,t,i){this.factory=e,this.digit=t,this.lastDigit=t,this.$el=this.createList(),this.$obj=this.$el,0<t&&this.select(t),this.factory.$el.append(this.$el)},select:function(e){if(void 0===e?e=this.digit:this.digit=e,this.digit!=this.lastDigit){var t=this.$el.find("."+this.classes.before).removeClass(this.classes.before);this.$el.find("."+this.classes.active).removeClass(this.classes.active).addClass(this.classes.before),this.appendListItem(this.classes.active,this.digit),t.remove(),this.lastDigit=this.digit}},play:function(){this.$el.addClass(this.factory.classes.play)},stop:function(){var e=this;setTimeout(function(){e.$el.removeClass(e.factory.classes.play)},this.factory.timer.interval)},createListItem:function(e,t){return['<li class="'+(e||"")+'">','<a href="#">','<div class="up">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>",'<div class="down">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>","</a>","</li>"].join("")},appendListItem:function(e,t){var i=this.createListItem(e,t);this.$el.append(i)},createList:function(){var e=this.getPrevDigit()?this.getPrevDigit():this.digit;return t(['<ul class="'+this.classes.flip+" "+(this.factory.running?this.factory.classes.play:"")+'">',this.createListItem(this.classes.before,e),this.createListItem(this.classes.active,this.digit),"</ul>"].join(""))},getNextDigit:function(){return 9==this.digit?0:this.digit+1},getPrevDigit:function(){return 0==this.digit?9:this.digit-1}})}(jQuery),function(i){"use strict";String.prototype.ucfirst=function(){return this.substr(0,1).toUpperCase()+this.substr(1)},i.fn.FlipClock=function(e,t){return new FlipClock(i(this),e,t)},i.fn.flipClock=function(e,t){return i.fn.FlipClock(e,t)}}(jQuery),function(r){"use strict";FlipClock.Time=FlipClock.Base.extend({time:0,factory:!1,minimumDigits:0,constructor:function(e,t,i){"object"!=typeof i&&(i={}),i.minimumDigits||(i.minimumDigits=e.minimumDigits),this.base(i),this.factory=e,t&&(this.time=t)},convertDigitsToArray:function(e){var t=[];e=e.toString();for(var i=0;i<e.length;i++)e[i].match(/^\d*$/g)&&t.push(e[i]);return t},digit:function(e){var t=this.toString(),i=t.length;return!!t[i-e]&&t[i-e]},digitize:function(e){var n=[];if(r.each(e,function(e,t){1==(t=t.toString()).length&&(t="0"+t);for(var i=0;i<t.length;i++)n.push(t.charAt(i))}),n.length>this.minimumDigits&&(this.minimumDigits=n.length),this.minimumDigits>n.length)for(var t=n.length;t<this.minimumDigits;t++)n.unshift("0");return n},getDateObject:function(){return this.time instanceof Date?this.time:new Date((new Date).getTime()+1e3*this.getTimeSeconds())},getDayCounter:function(e){var t=[this.getDays(),this.getHours(!0),this.getMinutes(!0)];return e&&t.push(this.getSeconds(!0)),this.digitize(t)},getDays:function(e){var t=this.getTimeSeconds()/60/60/24;return e&&(t%=7),Math.floor(t)},getHourCounter:function(){return this.digitize([this.getHours(),this.getMinutes(!0),this.getSeconds(!0)])},getHourly:function(){return this.getHourCounter()},getHours:function(e){var t=this.getTimeSeconds()/60/60;return e&&(t%=24),Math.floor(t)},getMilitaryTime:function(e,t){void 0===t&&(t=!0);var i=[(e=e||this.getDateObject()).getHours(),e.getMinutes()];return!0===t&&i.push(e.getSeconds()),this.digitize(i)},getMinutes:function(e){var t=this.getTimeSeconds()/60;return e&&(t%=60),Math.floor(t)},getMinuteCounter:function(){return this.digitize([this.getMinutes(),this.getSeconds(!0)])},getTimeSeconds:function(e){return e=e||new Date,this.time instanceof Date?this.factory.countdown?Math.max(this.time.getTime()/1e3-e.getTime()/1e3,0):e.getTime()/1e3-this.time.getTime()/1e3:this.time},getTime:function(e,t){void 0===t&&(t=!0),e=e||this.getDateObject(),console.log(e);var i=e.getHours(),n=[12<i?i-12:0===i?12:i,e.getMinutes()];return!0===t&&n.push(e.getSeconds()),this.digitize(n)},getSeconds:function(e){var t=this.getTimeSeconds();return e&&(60==t?t=0:t%=60),Math.ceil(t)},getWeeks:function(){var e=this.getTimeSeconds()/60/60/24/7;return mod&&(e%=52),Math.floor(e)},removeLeadingZeros:function(i,n){var o=0,s=[];return r.each(n,function(e,t){e<i?o+=parseInt(n[e],10):s.push(n[e])}),0===o?s:n},addSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()+e):this.time+=e},addSecond:function(){this.addSeconds(1)},subSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()-e):this.time-=e},subSecond:function(){this.subSeconds(1)},toString:function(){return this.getTimeSeconds().toString()}})}(jQuery),function(){"use strict";FlipClock.Timer=FlipClock.Base.extend({callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},count:0,factory:!1,interval:1e3,animationRate:1e3,constructor:function(e,t){this.base(t),this.factory=e,this.callback(this.callbacks.init),this.callback(this.callbacks.create)},getElapsed:function(){return this.count*this.interval},getElapsedTime:function(){return new Date(this.time+this.getElapsed())},reset:function(e){clearInterval(this.timer),this.count=0,this._setInterval(e),this.callback(this.callbacks.reset)},start:function(e){this.factory.running=!0,this._createTimer(e),this.callback(this.callbacks.start)},stop:function(e){this.factory.running=!1,this._clearInterval(e),this.callback(this.callbacks.stop),this.callback(e)},_clearInterval:function(){clearInterval(this.timer)},_createTimer:function(e){this._setInterval(e)},_destroyTimer:function(e){this._clearInterval(),this.timer=!1,this.callback(e),this.callback(this.callbacks.destroy)},_interval:function(e){this.callback(this.callbacks.interval),this.callback(e),this.count++},_setInterval:function(e){var t=this;t._interval(e),t.timer=setInterval(function(){t._interval(e)},this.interval)}})}(jQuery),function(n){FlipClock.TwentyFourHourClockFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(e){var i=this,t=this.factory.$el.find("ul");this.factory.time.time||(this.factory.original=new Date,this.factory.time=new FlipClock.Time(this.factory,this.factory.original)),(e=e||this.factory.time.getMilitaryTime(!1,this.showSeconds)).length>t.length&&n.each(e,function(e,t){i.createList(t)}),this.createDivider(),this.createDivider(),n(this.dividers[0]).insertBefore(this.lists[this.lists.length-2].$el),n(this.dividers[1]).insertBefore(this.lists[this.lists.length-4].$el),this.base()},flip:function(e,t){this.autoIncrement(),e=e||this.factory.time.getMilitaryTime(!1,this.showSeconds),this.base(e,t)}})}(jQuery),function(n){FlipClock.CounterFace=FlipClock.Face.extend({shouldAutoIncrement:!1,constructor:function(t,e){"object"!=typeof e&&(e={}),t.autoStart=!!e.autoStart,e.autoStart&&(this.shouldAutoIncrement=!0),t.increment=function(){t.countdown=!1,t.setTime(t.getTime().getTimeSeconds()+1)},t.decrement=function(){t.countdown=!0;var e=t.getTime().getTimeSeconds();0<e&&t.setTime(e-1)},t.setValue=function(e){t.setTime(e)},t.setCounter=function(e){t.setTime(e)},this.base(t,e)},build:function(){var i=this,e=this.factory.$el.find("ul"),t=this.factory.getTime().digitize([this.factory.getTime().time]);t.length>e.length&&n.each(t,function(e,t){i.createList(t).select(t)}),n.each(this.lists,function(e,t){t.play()}),this.base()},flip:function(e,t){this.shouldAutoIncrement&&this.autoIncrement(),e=e||this.factory.getTime().digitize([this.factory.getTime().time]),this.base(e,t)},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0),this.flip()}})}(jQuery),function(o){FlipClock.DailyCounterFace=FlipClock.Face.extend({showSeconds:!0,constructor:function(e,t){this.base(e,t)},build:function(e){var i=this,t=this.factory.$el.find("ul"),n=0;(e=e||this.factory.time.getDayCounter(this.showSeconds)).length>t.length&&o.each(e,function(e,t){i.createList(t)}),this.showSeconds?o(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el):n=2,o(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4+n].$el),o(this.createDivider("Hours")).insertBefore(this.lists[this.lists.length-6+n].$el),o(this.createDivider("Days",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e=e||this.factory.time.getDayCounter(this.showSeconds),this.autoIncrement(),this.base(e,t)}})}(jQuery),function(o){FlipClock.HourlyCounterFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(e,t){var i=this,n=this.factory.$el.find("ul");(t=t||this.factory.time.getHourCounter()).length>n.length&&o.each(t,function(e,t){i.createList(t)}),o(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el),o(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4].$el),e||o(this.createDivider("Hours",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e=e||this.factory.time.getHourCounter(),this.autoIncrement(),this.base(e,t)},appendDigitToClock:function(e){this.base(e),this.dividers[0].insertAfter(this.dividers[0].next())}})}(jQuery),jQuery,FlipClock.MinuteCounterFace=FlipClock.HourlyCounterFace.extend({clearExcessDigits:!1,constructor:function(e,t){this.base(e,t)},build:function(){this.base(!0,this.factory.time.getMinuteCounter())},flip:function(e,t){e=e||this.factory.time.getMinuteCounter(),this.base(e,t)}}),function(t){FlipClock.TwelveHourClockFace=FlipClock.TwentyFourHourClockFace.extend({meridium:!1,meridiumText:"AM",build:function(){var e=this.factory.time.getTime(!1,this.showSeconds);this.base(e),this.meridiumText=this.getMeridium(),this.meridium=t(['<ul class="flip-clock-meridium">',"<li>",'<a href="#">'+this.meridiumText+"</a>","</li>","</ul>"].join("")),this.meridium.insertAfter(this.lists[this.lists.length-1].$el)},flip:function(e,t){this.meridiumText!=this.getMeridium()&&(this.meridiumText=this.getMeridium(),this.meridium.find("a").html(this.meridiumText)),this.base(this.factory.time.getTime(!1,this.showSeconds),t)},getMeridium:function(){return 12<=(new Date).getHours()?"PM":"AM"},isPM:function(){return"PM"==this.getMeridium()},isAM:function(){return"AM"==this.getMeridium()}})}(jQuery),jQuery,FlipClock.Lang.Arabic={years:"Ø³ÙÙØ§Øª",months:"Ø´ÙÙØ±",days:"Ø£ÙØ§Ù",hours:"Ø³Ø§Ø¹Ø§Øª",minutes:"Ø¯ÙØ§Ø¦Ù",seconds:"Ø«ÙØ§ÙÙ"},FlipClock.Lang.ar=FlipClock.Lang.Arabic,FlipClock.Lang["ar-ar"]=FlipClock.Lang.Arabic,FlipClock.Lang.arabic=FlipClock.Lang.Arabic,jQuery,FlipClock.Lang.Danish={years:"Ãr",months:"MÃ¥neder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.da=FlipClock.Lang.Danish,FlipClock.Lang["da-dk"]=FlipClock.Lang.Danish,FlipClock.Lang.danish=FlipClock.Lang.Danish,jQuery,FlipClock.Lang.German={years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},FlipClock.Lang.de=FlipClock.Lang.German,FlipClock.Lang["de-de"]=FlipClock.Lang.German,FlipClock.Lang.german=FlipClock.Lang.German,jQuery,FlipClock.Lang.English={years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},FlipClock.Lang.en=FlipClock.Lang.English,FlipClock.Lang["en-us"]=FlipClock.Lang.English,FlipClock.Lang.english=FlipClock.Lang.English,jQuery,FlipClock.Lang.Spanish={years:"A&#241;os",months:"Meses",days:"D&#205;as",hours:"Horas",minutes:"Minutos",seconds:"Segundo"},FlipClock.Lang.es=FlipClock.Lang.Spanish,FlipClock.Lang["es-es"]=FlipClock.Lang.Spanish,FlipClock.Lang.spanish=FlipClock.Lang.Spanish,jQuery,FlipClock.Lang.Finnish={years:"Vuotta",months:"Kuukautta",days:"PÃ¤ivÃ¤Ã¤",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},FlipClock.Lang.fi=FlipClock.Lang.Finnish,FlipClock.Lang["fi-fi"]=FlipClock.Lang.Finnish,FlipClock.Lang.finnish=FlipClock.Lang.Finnish,jQuery,FlipClock.Lang.French={years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},FlipClock.Lang.fr=FlipClock.Lang.French,FlipClock.Lang["fr-ca"]=FlipClock.Lang.French,FlipClock.Lang.french=FlipClock.Lang.French,jQuery,FlipClock.Lang.Italian={years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},FlipClock.Lang.it=FlipClock.Lang.Italian,FlipClock.Lang["it-it"]=FlipClock.Lang.Italian,FlipClock.Lang.italian=FlipClock.Lang.Italian,jQuery,FlipClock.Lang.Latvian={years:"Gadi",months:"MÄneÅ¡i",days:"Dienas",hours:"Stundas",minutes:"MinÅ«tes",seconds:"Sekundes"},FlipClock.Lang.lv=FlipClock.Lang.Latvian,FlipClock.Lang["lv-lv"]=FlipClock.Lang.Latvian,FlipClock.Lang.latvian=FlipClock.Lang.Latvian,jQuery,FlipClock.Lang.Dutch={years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},FlipClock.Lang.nl=FlipClock.Lang.Dutch,FlipClock.Lang["nl-be"]=FlipClock.Lang.Dutch,FlipClock.Lang.dutch=FlipClock.Lang.Dutch,jQuery,FlipClock.Lang.Norwegian={years:"Ãr",months:"MÃ¥neder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.no=FlipClock.Lang.Norwegian,FlipClock.Lang.nb=FlipClock.Lang.Norwegian,FlipClock.Lang["no-nb"]=FlipClock.Lang.Norwegian,FlipClock.Lang.norwegian=FlipClock.Lang.Norwegian,jQuery,FlipClock.Lang.Portuguese={years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.pt=FlipClock.Lang.Portuguese,FlipClock.Lang["pt-br"]=FlipClock.Lang.Portuguese,FlipClock.Lang.portuguese=FlipClock.Lang.Portuguese,jQuery,FlipClock.Lang.Russian={years:"Ð»ÐµÑ",months:"Ð¼ÐµÑÑÑÐµÐ²",days:"Ð´Ð½ÐµÐ¹",hours:"ÑÐ°ÑÐ¾Ð²",minutes:"Ð¼Ð¸Ð½ÑÑ",seconds:"ÑÐµÐºÑÐ½Ð´"},FlipClock.Lang.ru=FlipClock.Lang.Russian,FlipClock.Lang["ru-ru"]=FlipClock.Lang.Russian,FlipClock.Lang.russian=FlipClock.Lang.Russian,jQuery,FlipClock.Lang.Swedish={years:"Ãr",months:"MÃ¥nader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},FlipClock.Lang.sv=FlipClock.Lang.Swedish,FlipClock.Lang["sv-se"]=FlipClock.Lang.Swedish,FlipClock.Lang.swedish=FlipClock.Lang.Swedish,(Base=function(){}).extend=function(e,t){"use strict";var i=Base.prototype.extend;Base._prototyping=!0;var n=new this;i.call(n,e),n.base=function(){},delete Base._prototyping;var o=n.constructor,s=n.constructor=function(){if(!Base._prototyping)if(this._constructing||this.constructor==s)this._constructing=!0,o.apply(this,arguments),delete this._constructing;else if(null!==arguments[0])return(arguments[0].extend||i).call(arguments[0],n)};return s.ancestor=this,s.extend=this.extend,s.forEach=this.forEach,s.implement=this.implement,s.prototype=n,s.toString=this.toString,s.valueOf=function(e){return"object"==e?s:o.valueOf()},i.call(s,t),"function"==typeof s.init&&s.init(),s},Base.prototype={extend:function(e,t){if(1<arguments.length){var i=this[e];if(i&&"function"==typeof t&&(!i.valueOf||i.valueOf()!=t.valueOf())&&/\bbase\b/.test(t)){var n=t.valueOf();(t=function(){var e=this.base||Base.prototype.base;this.base=i;var t=n.apply(this,arguments);return this.base=e,t}).valueOf=function(e){return"object"==e?t:n},t.toString=Base.toString}this[e]=t}else if(e){var o=Base.prototype.extend;Base._prototyping||"function"==typeof this||(o=this.extend||o);for(var s={toSource:null},r=["constructor","toString","valueOf"],a=Base._prototyping?0:1;l=r[a++];)e[l]!=s[l]&&o.call(this,l,e[l]);for(var l in e)s[l]||o.call(this,l,e[l])}return this}},Base=Base.extend({constructor:function(){this.extend(arguments[0])}},{ancestor:Object,version:"1.1",forEach:function(e,t,i){for(var n in e)void 0===this.prototype[n]&&t.call(i,e[n],n,e)},implement:function(){for(var e=0;e<arguments.length;e++)"function"==typeof arguments[e]?arguments[e](this.prototype):this.prototype.extend(arguments[e]);return this},toString:function(){return String(this.valueOf())}}),function(i){"use strict";(FlipClock=function(e,t,i){return t instanceof Object&&t instanceof Date==0&&(i=t,t=0),new FlipClock.Factory(e,t,i)}).Lang={},FlipClock.Base=Base.extend({buildDate:"2014-10-06",version:"0.7.2",constructor:function(e,t){"object"!=typeof e&&(e={}),"object"!=typeof t&&(t={}),this.setOptions(i.extend(!0,{},e,t))},callback:function(e){if("function"==typeof e){for(var t=[],i=1;i<=arguments.length;i++)arguments[i]&&t.push(arguments[i]);e.apply(this,t)}},log:function(e){window.console&&console.log&&console.log(e)},getOption:function(e){return!!this[e]&&this[e]},getOptions:function(){return this},setOption:function(e,t){this[e]=t},setOptions:function(e){for(var t in e)void 0!==e[t]&&this.setOption(t,e[t])}})}(jQuery),function(r){"use strict";FlipClock.Face=FlipClock.Base.extend({autoStart:!0,dividers:[],factory:!1,lists:[],constructor:function(e,t){this.dividers=[],this.lists=[],this.base(t),this.factory=e},build:function(){this.autoStart&&this.start()},createDivider:function(e,t,i){"boolean"!=typeof t&&t||(i=t,t=e);var n=['<span class="'+this.factory.classes.dot+' top"></span>','<span class="'+this.factory.classes.dot+' bottom"></span>'].join("");i&&(n=""),e=this.factory.localize(e);var o=['<span class="'+this.factory.classes.divider+" "+(t||"").toLowerCase()+'">','<span class="'+this.factory.classes.label+'">'+(e||"")+"</span>",n,"</span>"],s=r(o.join(""));return this.dividers.push(s),s},createList:function(e,t){"object"==typeof e&&(t=e,e=0);var i=new FlipClock.List(this.factory,e,t);return this.lists.push(i),i},reset:function(){this.factory.time=new FlipClock.Time(this.factor,this.factory.original?Math.round(this.factory.original):0,{minimumDigits:this.factory.minimumDigits}),this.flip(this.factory.original,!1)},appendDigitToClock:function(e){e.$el.append(!1)},addDigit:function(e){var t=this.createList(e,{classes:{active:this.factory.classes.active,before:this.factory.classes.before,flip:this.factory.classes.flip}});this.appendDigitToClock(t)},start:function(){},stop:function(){},autoIncrement:function(){this.factory.countdown?this.decrement():this.increment()},increment:function(){this.factory.time.addSecond()},decrement:function(){0==this.factory.time.getTimeSeconds()?this.factory.stop():this.factory.time.subSecond()},flip:function(e,n){var o=this;r.each(e,function(e,t){var i=o.lists[e];i?(n||t==i.digit||i.play(),i.select(t)):o.addDigit(t)})}})}(jQuery),function(n){"use strict";FlipClock.Factory=FlipClock.Base.extend({animationRate:1e3,autoStart:!0,callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},classes:{active:"flip-clock-active",before:"flip-clock-before",divider:"flip-clock-divider",dot:"flip-clock-dot",label:"flip-clock-label",flip:"flip",play:"play",wrapper:"flip-clock-wrapper"},clockFace:"HourlyCounter",countdown:!1,defaultClockFace:"HourlyCounter",defaultLanguage:"english",$el:!1,face:!0,lang:!1,language:"english",minimumDigits:0,original:!1,running:!1,time:!1,timer:!1,$wrapper:!1,constructor:function(e,t,i){i=i||{},this.lists=[],this.running=!1,this.base(i),this.$el=n(e).addClass(this.classes.wrapper),this.$wrapper=this.$el,this.original=t instanceof Date?t:t?Math.round(t):0,this.time=new FlipClock.Time(this,this.original,{minimumDigits:this.minimumDigits,animationRate:this.animationRate}),this.timer=new FlipClock.Timer(this,i),this.loadLanguage(this.language),this.loadClockFace(this.clockFace,i),this.autoStart&&this.start()},loadClockFace:function(e,t){var i,n=!1;return e=e.ucfirst()+"Face",this.face.stop&&(this.stop(),n=!0),this.$el.html(""),this.time.minimumDigits=this.minimumDigits,(i=FlipClock[e]?new FlipClock[e](this,t):new FlipClock[this.defaultClockFace+"Face"](this,t)).build(),this.face=i,n&&this.start(),this.face},loadLanguage:function(e){var t;return t=FlipClock.Lang[e.ucfirst()]?FlipClock.Lang[e.ucfirst()]:FlipClock.Lang[e]?FlipClock.Lang[e]:FlipClock.Lang[this.defaultLanguage],this.lang=t},localize:function(e,t){var i=this.lang;if(!e)return null;var n=e.toLowerCase();return"object"==typeof t&&(i=t),i&&i[n]?i[n]:e},start:function(e){var t=this;t.running||t.countdown&&!(t.countdown&&0<t.time.time)?t.log("Trying to start timer when countdown already at 0"):(t.face.start(t.time),t.timer.start(function(){t.flip(),"function"==typeof e&&e()}))},stop:function(e){for(var t in this.face.stop(),this.timer.stop(e),this.lists)this.lists.hasOwnProperty(t)&&this.lists[t].stop()},reset:function(e){this.timer.reset(e),this.face.reset()},setTime:function(e){this.time.time=e,this.flip(!0)},getTime:function(){return this.time},setCountdown:function(e){var t=this.running;this.countdown=!!e,t&&(this.stop(),this.start())},flip:function(e){this.face.flip(!1,e)}})}(jQuery),function(t){"use strict";FlipClock.List=FlipClock.Base.extend({digit:0,classes:{active:"flip-clock-active",before:"flip-clock-before",flip:"flip"},factory:!1,$el:!1,$obj:!1,items:[],lastDigit:0,constructor:function(e,t){this.factory=e,this.digit=t,this.lastDigit=t,this.$el=this.createList(),this.$obj=this.$el,0<t&&this.select(t),this.factory.$el.append(this.$el)},select:function(e){if(void 0===e?e=this.digit:this.digit=e,this.digit!=this.lastDigit){var t=this.$el.find("."+this.classes.before).removeClass(this.classes.before);this.$el.find("."+this.classes.active).removeClass(this.classes.active).addClass(this.classes.before),this.appendListItem(this.classes.active,this.digit),t.remove(),this.lastDigit=this.digit}},play:function(){this.$el.addClass(this.factory.classes.play)},stop:function(){var e=this;setTimeout(function(){e.$el.removeClass(e.factory.classes.play)},this.factory.timer.interval)},createListItem:function(e,t){return['<li class="'+(e||"")+'">','<a href="#">','<div class="up">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>",'<div class="down">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>","</a>","</li>"].join("")},appendListItem:function(e,t){var i=this.createListItem(e,t);this.$el.append(i)},createList:function(){var e=this.getPrevDigit()?this.getPrevDigit():this.digit;return t(['<ul class="'+this.classes.flip+" "+(this.factory.running?this.factory.classes.play:"")+'">',this.createListItem(this.classes.before,e),this.createListItem(this.classes.active,this.digit),"</ul>"].join(""))},getNextDigit:function(){return 9==this.digit?0:this.digit+1},getPrevDigit:function(){return 0==this.digit?9:this.digit-1}})}(jQuery),function(i){"use strict";String.prototype.ucfirst=function(){return this.substr(0,1).toUpperCase()+this.substr(1)},i.fn.FlipClock=function(e,t){return new FlipClock(i(this),e,t)},i.fn.flipClock=function(e,t){return i.fn.FlipClock(e,t)}}(jQuery),function(s){"use strict";FlipClock.Time=FlipClock.Base.extend({time:0,factory:!1,minimumDigits:0,constructor:function(e,t,i){"object"!=typeof i&&(i={}),i.minimumDigits||(i.minimumDigits=e.minimumDigits),this.base(i),this.factory=e,t&&(this.time=t)},convertDigitsToArray:function(e){var t=[];e=e.toString();for(var i=0;i<e.length;i++)e[i].match(/^\d*$/g)&&t.push(e[i]);return t},digit:function(e){var t=this.toString(),i=t.length;return!!t[i-e]&&t[i-e]},digitize:function(e){var n=[];if(s.each(e,function(e,t){1==(t=t.toString()).length&&(t="0"+t);for(var i=0;i<t.length;i++)n.push(t.charAt(i))}),n.length>this.minimumDigits&&(this.minimumDigits=n.length),this.minimumDigits>n.length)for(var t=n.length;t<this.minimumDigits;t++)n.unshift("0");return n},getDateObject:function(){return this.time instanceof Date?this.time:new Date((new Date).getTime()+1e3*this.getTimeSeconds())},getDayCounter:function(e){var t=[this.getDays(),this.getHours(!0),this.getMinutes(!0)];return e&&t.push(this.getSeconds(!0)),this.digitize(t)},getDays:function(e){var t=this.getTimeSeconds()/60/60/24;return e&&(t%=7),Math.floor(t)},getHourCounter:function(){return this.digitize([this.getHours(),this.getMinutes(!0),this.getSeconds(!0)])},getHourly:function(){return this.getHourCounter()},getHours:function(e){var t=this.getTimeSeconds()/60/60;return e&&(t%=24),Math.floor(t)},getMilitaryTime:function(e,t){void 0===t&&(t=!0);var i=[(e=e||this.getDateObject()).getHours(),e.getMinutes()];return!0===t&&i.push(e.getSeconds()),this.digitize(i)},getMinutes:function(e){var t=this.getTimeSeconds()/60;return e&&(t%=60),Math.floor(t)},getMinuteCounter:function(){return this.digitize([this.getMinutes(),this.getSeconds(!0)])},getTimeSeconds:function(e){return e=e||new Date,this.time instanceof Date?this.factory.countdown?Math.max(this.time.getTime()/1e3-e.getTime()/1e3,0):e.getTime()/1e3-this.time.getTime()/1e3:this.time},getTime:function(e,t){void 0===t&&(t=!0),e=e||this.getDateObject(),console.log(e);var i=e.getHours(),n=[12<i?i-12:0===i?12:i,e.getMinutes()];return!0===t&&n.push(e.getSeconds()),this.digitize(n)},getSeconds:function(e){var t=this.getTimeSeconds();return e&&(60==t?t=0:t%=60),Math.ceil(t)},getWeeks:function(){var e=this.getTimeSeconds()/60/60/24/7;return mod&&(e%=52),Math.floor(e)},removeLeadingZeros:function(t,i){var n=0,o=[];return s.each(i,function(e){e<t?n+=parseInt(i[e],10):o.push(i[e])}),0===n?o:i},addSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()+e):this.time+=e},addSecond:function(){this.addSeconds(1)},subSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()-e):this.time-=e},subSecond:function(){this.subSeconds(1)},toString:function(){return this.getTimeSeconds().toString()}})}(jQuery),function(){"use strict";FlipClock.Timer=FlipClock.Base.extend({callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},count:0,factory:!1,interval:1e3,animationRate:1e3,constructor:function(e,t){this.base(t),this.factory=e,this.callback(this.callbacks.init),this.callback(this.callbacks.create)},getElapsed:function(){return this.count*this.interval},getElapsedTime:function(){return new Date(this.time+this.getElapsed())},reset:function(e){clearInterval(this.timer),this.count=0,this._setInterval(e),this.callback(this.callbacks.reset)},start:function(e){this.factory.running=!0,this._createTimer(e),this.callback(this.callbacks.start)},stop:function(e){this.factory.running=!1,this._clearInterval(e),this.callback(this.callbacks.stop),this.callback(e)},_clearInterval:function(){clearInterval(this.timer)},_createTimer:function(e){this._setInterval(e)},_destroyTimer:function(e){this._clearInterval(),this.timer=!1,this.callback(e),this.callback(this.callbacks.destroy)},_interval:function(e){this.callback(this.callbacks.interval),this.callback(e),this.count++},_setInterval:function(e){var t=this;t._interval(e),t.timer=setInterval(function(){t._interval(e)},this.interval)}})}(jQuery),function(n){FlipClock.TwentyFourHourClockFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(e){var i=this,t=this.factory.$el.find("ul");this.factory.time.time||(this.factory.original=new Date,this.factory.time=new FlipClock.Time(this.factory,this.factory.original)),(e=e||this.factory.time.getMilitaryTime(!1,this.showSeconds)).length>t.length&&n.each(e,function(e,t){i.createList(t)}),this.createDivider(),this.createDivider(),n(this.dividers[0]).insertBefore(this.lists[this.lists.length-2].$el),n(this.dividers[1]).insertBefore(this.lists[this.lists.length-4].$el),this.base()},flip:function(e,t){this.autoIncrement(),e=e||this.factory.time.getMilitaryTime(!1,this.showSeconds),this.base(e,t)}})}(jQuery),function(n){FlipClock.CounterFace=FlipClock.Face.extend({shouldAutoIncrement:!1,constructor:function(t,e){"object"!=typeof e&&(e={}),t.autoStart=!!e.autoStart,e.autoStart&&(this.shouldAutoIncrement=!0),t.increment=function(){t.countdown=!1,t.setTime(t.getTime().getTimeSeconds()+1)},t.decrement=function(){t.countdown=!0;var e=t.getTime().getTimeSeconds();0<e&&t.setTime(e-1)},t.setValue=function(e){t.setTime(e)},t.setCounter=function(e){t.setTime(e)},this.base(t,e)},build:function(){var i=this,e=this.factory.$el.find("ul"),t=this.factory.getTime().digitize([this.factory.getTime().time]);t.length>e.length&&n.each(t,function(e,t){i.createList(t).select(t)}),n.each(this.lists,function(e,t){t.play()}),this.base()},flip:function(e,t){this.shouldAutoIncrement&&this.autoIncrement(),e=e||this.factory.getTime().digitize([this.factory.getTime().time]),this.base(e,t)},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0),this.flip()}})}(jQuery),function(o){FlipClock.DailyCounterFace=FlipClock.Face.extend({showSeconds:!0,constructor:function(e,t){this.base(e,t)},build:function(e){var i=this,t=this.factory.$el.find("ul"),n=0;(e=e||this.factory.time.getDayCounter(this.showSeconds)).length>t.length&&o.each(e,function(e,t){i.createList(t)}),this.showSeconds?o(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el):n=2,o(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4+n].$el),o(this.createDivider("Hours")).insertBefore(this.lists[this.lists.length-6+n].$el),o(this.createDivider("Days",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e=e||this.factory.time.getDayCounter(this.showSeconds),this.autoIncrement(),this.base(e,t)}})}(jQuery),function(o){FlipClock.HourlyCounterFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(e,t){var i=this,n=this.factory.$el.find("ul");(t=t||this.factory.time.getHourCounter()).length>n.length&&o.each(t,function(e,t){i.createList(t)}),o(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el),o(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4].$el),e||o(this.createDivider("Hours",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e=e||this.factory.time.getHourCounter(),this.autoIncrement(),this.base(e,t)},appendDigitToClock:function(e){this.base(e),this.dividers[0].insertAfter(this.dividers[0].next())}})}(jQuery),jQuery,FlipClock.MinuteCounterFace=FlipClock.HourlyCounterFace.extend({clearExcessDigits:!1,constructor:function(e,t){this.base(e,t)},build:function(){this.base(!0,this.factory.time.getMinuteCounter())},flip:function(e,t){e=e||this.factory.time.getMinuteCounter(),this.base(e,t)}}),function(t){FlipClock.TwelveHourClockFace=FlipClock.TwentyFourHourClockFace.extend({meridium:!1,meridiumText:"AM",build:function(){var e=this.factory.time.getTime(!1,this.showSeconds);this.base(e),this.meridiumText=this.getMeridium(),this.meridium=t(['<ul class="flip-clock-meridium">',"<li>",'<a href="#">'+this.meridiumText+"</a>","</li>","</ul>"].join("")),this.meridium.insertAfter(this.lists[this.lists.length-1].$el)},flip:function(e,t){this.meridiumText!=this.getMeridium()&&(this.meridiumText=this.getMeridium(),this.meridium.find("a").html(this.meridiumText)),this.base(this.factory.time.getTime(!1,this.showSeconds),t)},getMeridium:function(){return 12<=(new Date).getHours()?"PM":"AM"},isPM:function(){return"PM"==this.getMeridium()},isAM:function(){return"AM"==this.getMeridium()}})}(jQuery),jQuery,FlipClock.Lang.Arabic={years:"Ø³ÙÙØ§Øª",months:"Ø´ÙÙØ±",days:"Ø£ÙØ§Ù",hours:"Ø³Ø§Ø¹Ø§Øª",minutes:"Ø¯ÙØ§Ø¦Ù",seconds:"Ø«ÙØ§ÙÙ"},FlipClock.Lang.ar=FlipClock.Lang.Arabic,FlipClock.Lang["ar-ar"]=FlipClock.Lang.Arabic,FlipClock.Lang.arabic=FlipClock.Lang.Arabic,jQuery,FlipClock.Lang.Danish={years:"Ãr",months:"MÃ¥neder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.da=FlipClock.Lang.Danish,FlipClock.Lang["da-dk"]=FlipClock.Lang.Danish,FlipClock.Lang.danish=FlipClock.Lang.Danish,jQuery,FlipClock.Lang.German={years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},FlipClock.Lang.de=FlipClock.Lang.German,FlipClock.Lang["de-de"]=FlipClock.Lang.German,FlipClock.Lang.german=FlipClock.Lang.German,jQuery,FlipClock.Lang.English={years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},FlipClock.Lang.en=FlipClock.Lang.English,FlipClock.Lang["en-us"]=FlipClock.Lang.English,FlipClock.Lang.english=FlipClock.Lang.English,jQuery,FlipClock.Lang.Spanish={years:"A&#241;os",months:"Meses",days:"D&#205;as",hours:"Horas",minutes:"Minutos",seconds:"Segundo"},FlipClock.Lang.es=FlipClock.Lang.Spanish,FlipClock.Lang["es-es"]=FlipClock.Lang.Spanish,FlipClock.Lang.spanish=FlipClock.Lang.Spanish,jQuery,FlipClock.Lang.Finnish={years:"Vuotta",months:"Kuukautta",days:"PÃ¤ivÃ¤Ã¤",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},FlipClock.Lang.fi=FlipClock.Lang.Finnish,FlipClock.Lang["fi-fi"]=FlipClock.Lang.Finnish,FlipClock.Lang.finnish=FlipClock.Lang.Finnish,jQuery,FlipClock.Lang.French={years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},FlipClock.Lang.fr=FlipClock.Lang.French,FlipClock.Lang["fr-ca"]=FlipClock.Lang.French,FlipClock.Lang.french=FlipClock.Lang.French,jQuery,FlipClock.Lang.Italian={years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},FlipClock.Lang.it=FlipClock.Lang.Italian,FlipClock.Lang["it-it"]=FlipClock.Lang.Italian,FlipClock.Lang.italian=FlipClock.Lang.Italian,jQuery,FlipClock.Lang.Latvian={years:"Gadi",months:"MÄneÅ¡i",days:"Dienas",hours:"Stundas",minutes:"MinÅ«tes",seconds:"Sekundes"},FlipClock.Lang.lv=FlipClock.Lang.Latvian,FlipClock.Lang["lv-lv"]=FlipClock.Lang.Latvian,FlipClock.Lang.latvian=FlipClock.Lang.Latvian,jQuery,FlipClock.Lang.Dutch={years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},FlipClock.Lang.nl=FlipClock.Lang.Dutch,FlipClock.Lang["nl-be"]=FlipClock.Lang.Dutch,FlipClock.Lang.dutch=FlipClock.Lang.Dutch,jQuery,FlipClock.Lang.Norwegian={years:"Ãr",months:"MÃ¥neder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.no=FlipClock.Lang.Norwegian,FlipClock.Lang.nb=FlipClock.Lang.Norwegian,FlipClock.Lang["no-nb"]=FlipClock.Lang.Norwegian,FlipClock.Lang.norwegian=FlipClock.Lang.Norwegian,jQuery,FlipClock.Lang.Portuguese={years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.pt=FlipClock.Lang.Portuguese,FlipClock.Lang["pt-br"]=FlipClock.Lang.Portuguese,FlipClock.Lang.portuguese=FlipClock.Lang.Portuguese,jQuery,FlipClock.Lang.Russian={years:"Ð»ÐµÑ",months:"Ð¼ÐµÑÑÑÐµÐ²",days:"Ð´Ð½ÐµÐ¹",hours:"ÑÐ°ÑÐ¾Ð²",minutes:"Ð¼Ð¸Ð½ÑÑ",seconds:"ÑÐµÐºÑÐ½Ð´"},FlipClock.Lang.ru=FlipClock.Lang.Russian,FlipClock.Lang["ru-ru"]=FlipClock.Lang.Russian,FlipClock.Lang.russian=FlipClock.Lang.Russian,jQuery,FlipClock.Lang.Swedish={years:"Ãr",months:"MÃ¥nader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},FlipClock.Lang.sv=FlipClock.Lang.Swedish,FlipClock.Lang["sv-se"]=FlipClock.Lang.Swedish,FlipClock.Lang.swedish=FlipClock.Lang.Swedish,function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(c){"use strict";var o,r=window.Slick||{};o=0,(r=function(e,t){var i,n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(e),appendDots:c(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return c('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=c(e),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,i=c(e).data("slick")||{},n.options=c.extend({},n.defaults,t,i),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=c.proxy(n.autoPlay,n),n.autoPlayClear=c.proxy(n.autoPlayClear,n),n.autoPlayIterator=c.proxy(n.autoPlayIterator,n),n.changeSlide=c.proxy(n.changeSlide,n),n.clickHandler=c.proxy(n.clickHandler,n),n.selectHandler=c.proxy(n.selectHandler,n),n.setPosition=c.proxy(n.setPosition,n),n.swipeHandler=c.proxy(n.swipeHandler,n),n.dragHandler=c.proxy(n.dragHandler,n),n.keyHandler=c.proxy(n.keyHandler,n),n.instanceUid=o++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(e,t,i){var n=this;if("boolean"==typeof t)i=t,t=null;else if(t<0||t>=n.slideCount)return!1;n.unload(),"number"==typeof t?0===t&&0===n.$slides.length?c(e).appendTo(n.$slideTrack):i?c(e).insertBefore(n.$slides.eq(t)):c(e).insertAfter(n.$slides.eq(t)):!0===i?c(e).prependTo(n.$slideTrack):c(e).appendTo(n.$slideTrack),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slides.each(function(e,t){c(t).attr("data-slick-index",e)}),n.$slidesCache=n.$slides,n.reinit()},r.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},r.prototype.animateSlide=function(e,t){var i={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(e=-e),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:e},n.options.speed,n.options.easing,t):n.$slideTrack.animate({top:e},n.options.speed,n.options.easing,t):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),c({animStart:n.currentLeft}).animate({animStart:e},{duration:n.options.speed,easing:n.options.easing,step:function(e){e=Math.ceil(e),!1===n.options.vertical?i[n.animType]="translate("+e+"px, 0px)":i[n.animType]="translate(0px,"+e+"px)",n.$slideTrack.css(i)},complete:function(){t&&t.call()}})):(n.applyTransition(),e=Math.ceil(e),!1===n.options.vertical?i[n.animType]="translate3d("+e+"px, 0px, 0px)":i[n.animType]="translate3d(0px,"+e+"px, 0px)",n.$slideTrack.css(i),t&&setTimeout(function(){n.disableTransition(),t.call()},n.options.speed))},r.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=c(e).not(this.$slider)),e},r.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=c(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},r.prototype.applyTransition=function(e){var t=this,i={};!1===t.options.fade?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},r.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},r.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=c(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=c(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var e,t,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),t=c("<ul />").addClass(i.options.dotsClass),e=0;e<=i.getDotCount();e+=1)t.append(c("<li />").append(i.options.customPaging.call(this,i,e)));i.$dots=t.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){c(t).attr("data-slick-index",e).data("originalStyling",c(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?c('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),c("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},r.prototype.buildRows=function(){var e,t,i,n,o,s,r,a=this;if(n=document.createDocumentFragment(),s=a.$slider.children(),0<a.options.rows){for(r=a.options.slidesPerRow*a.options.rows,o=Math.ceil(s.length/r),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var u=e*r+(t*a.options.slidesPerRow+i);s.get(u)&&c.appendChild(s.get(u))}l.appendChild(c)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(e,t){var i,n,o,s=this,r=!1,a=s.$slider.width(),l=window.innerWidth||c(window).width();if("window"===s.respondTo?o=l:"slider"===s.respondTo?o=a:"min"===s.respondTo&&(o=Math.min(l,a)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(i in n=null,s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?o<s.breakpoints[i]&&(n=s.breakpoints[i]):o>s.breakpoints[i]&&(n=s.breakpoints[i]));null!==n?null!==s.activeBreakpoint&&n===s.activeBreakpoint&&!t||(s.activeBreakpoint=n,"unslick"===s.breakpointSettings[n]?s.unslick(n):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[n]),!0===e&&(s.currentSlide=s.options.initialSlide),s.refresh(e)),r=n):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===e&&(s.currentSlide=s.options.initialSlide),s.refresh(e),r=n),e||!1===r||s.$slider.trigger("breakpoint",[s,r])}},r.prototype.changeSlide=function(e,t){var i,n,o=this,s=c(e.currentTarget);switch(s.is("a")&&e.preventDefault(),s.is("li")||(s=s.closest("li")),i=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":n=0==i?o.options.slidesToScroll:o.options.slidesToShow-i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-n,!1,t);break;case"next":n=0==i?o.options.slidesToScroll:i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+n,!1,t);break;case"index":var r=0===e.data.index?0:e.data.index||s.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(r),!1,t),s.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(e){var t,i;if(i=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var n in t){if(e<t[n]){e=i;break}i=t[n]}return e},r.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(c("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",c.proxy(e.interrupt,e,!0)).off("mouseleave.slick",c.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),c(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().off("click.slick",e.selectHandler),c(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),c(window).off("resize.slick.slick-"+e.instanceUid,e.resize),c("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),c(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},r.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",c.proxy(e.interrupt,e,!1))},r.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},r.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},r.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),c(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},r.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},r.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout(function(){i.disableTransition(e),t.call()},i.options.speed))},r.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},r.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var t=c(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=t.is(":focus"),i.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},r.prototype.getLeft=function(e){var t,i,n,o,s=this,r=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),!0===s.options.infinite?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,o=-1,!0===s.options.vertical&&!0===s.options.centerMode&&(2===s.options.slidesToShow?o=-1.5:1===s.options.slidesToShow&&(o=-2)),r=i*s.options.slidesToShow*o),s.slideCount%s.options.slidesToScroll!=0&&e+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(r=e>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(e-s.slideCount))*s.slideWidth*-1,(s.options.slidesToShow-(e-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,s.slideCount%s.options.slidesToScroll*i*-1))):e+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(e+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(e+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(r=s.slideOffset=0),!0===s.options.centerMode&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:!0===s.options.centerMode&&!0===s.options.infinite?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:!0===s.options.centerMode&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),t=!1===s.options.vertical?e*s.slideWidth*-1+s.slideOffset:e*i*-1+r,!0===s.options.variableWidth&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow),t=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===s.options.centerMode&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow+1),t=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,t+=(s.$list.width()-n.outerWidth())/2)),t},r.prototype.getOption=r.prototype.slickGetOption=function(e){return this.options[e]},r.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,o=[];for(e=!1===t.options.infinite?t.slideCount:(i=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,2*t.slideCount);i<e;)o.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var i,n,o=this;return n=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(e,t){if(t.offsetLeft-n+c(t).outerWidth()/2>-1*o.swipeLeft)return i=t,!1}),Math.abs(c(i).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},r.prototype.init=function(e){var t=this;c(t.$slider).hasClass("slick-initialized")||(c(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},r.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),o=n.getNavigableIndexes().filter(function(e){return 0<=e&&e<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(e){var t=o.indexOf(e);if(c(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+e,tabindex:-1}),-1!==t){var i="slick-slide-control"+n.instanceUid+t;c("#"+i).length&&c(this).attr({"aria-describedby":i})}}),n.$dots.attr("role","tablist").find("li").each(function(e){var t=o[e];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+e,"aria-controls":"slick-slide"+n.instanceUid+t,"aria-label":e+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=n.currentSlide,t=e+n.options.slidesToShow;e<t;e++)n.options.focusOnChange?n.$slides.eq(e).attr({tabindex:"0"}):n.$slides.eq(e).removeAttr("tabindex");n.activateADA()},r.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},r.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(c("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&c("li",e.$dots).on("mouseenter.slick",c.proxy(e.interrupt,e,!0)).on("mouseleave.slick",c.proxy(e.interrupt,e,!1))},r.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",c.proxy(e.interrupt,e,!1)))},r.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),c(document).on(e.visibilityChange,c.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),c(window).on("orientationchange.slick.slick-"+e.instanceUid,c.proxy(e.orientationChange,e)),c(window).on("resize.slick.slick-"+e.instanceUid,c.proxy(e.resize,e)),c("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),c(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),c(e.setPosition)},r.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},r.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var e,t,i,s=this;function n(e){c("img[data-lazy]",e).each(function(){var e=c(this),t=c(this).attr("data-lazy"),i=c(this).attr("data-srcset"),n=c(this).attr("data-sizes")||s.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){e.animate({opacity:0},100,function(){i&&(e.attr("srcset",i),n&&e.attr("sizes",n)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,e,t])})},o.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,e,t])},o.src=t})}if(!0===s.options.centerMode?i=!0===s.options.infinite?(t=s.currentSlide+(s.options.slidesToShow/2+1))+s.options.slidesToShow+2:(t=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),s.options.slidesToShow/2+1+2+s.currentSlide):(t=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,i=Math.ceil(t+s.options.slidesToShow),!0===s.options.fade&&(0<t&&t--,i<=s.slideCount&&i++)),e=s.$slider.find(".slick-slide").slice(t,i),"anticipated"===s.options.lazyLoad)for(var o=t-1,r=i,a=s.$slider.find(".slick-slide"),l=0;l<s.options.slidesToScroll;l++)o<0&&(o=s.slideCount-1),e=(e=e.add(a.eq(o))).add(a.eq(r)),o--,r++;n(e),s.slideCount<=s.options.slidesToShow?n(s.$slider.find(".slick-slide")):s.currentSlide>=s.slideCount-s.options.slidesToShow?n(s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow)):0===s.currentSlide&&n(s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow))},r.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},r.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&c(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(e){e.preventDefault()},r.prototype.progressiveLazyLoad=function(e){e=e||1;var t,i,n,o,s,r=this,a=c("img[data-lazy]",r.$slider);a.length?(t=a.first(),i=t.attr("data-lazy"),n=t.attr("data-srcset"),o=t.attr("data-sizes")||r.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){n&&(t.attr("srcset",n),o&&t.attr("sizes",o)),t.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,t,i]),r.progressiveLazyLoad()},s.onerror=function(){e<3?setTimeout(function(){r.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,t,i]),r.progressiveLazyLoad())},s.src=i):r.$slider.trigger("allImagesLoaded",[r])},r.prototype.refresh=function(e){var t,i,n=this;i=n.slideCount-n.options.slidesToShow,!n.options.infinite&&n.currentSlide>i&&(n.currentSlide=i),n.slideCount<=n.options.slidesToShow&&(n.currentSlide=0),t=n.currentSlide,n.destroy(!0),c.extend(n,n.initials,{currentSlide:t}),n.init(),e||n.changeSlide({data:{message:"index",index:t}},!1)},r.prototype.registerBreakpoints=function(){var e,t,i,n=this,o=n.options.responsive||null;if("array"===c.type(o)&&o.length){for(e in n.respondTo=n.options.respondTo||"window",o)if(i=n.breakpoints.length-1,o.hasOwnProperty(e)){for(t=o[e].breakpoint;0<=i;)n.breakpoints[i]&&n.breakpoints[i]===t&&n.breakpoints.splice(i,1),i--;n.breakpoints.push(t),n.breakpointSettings[t]=o[e].settings}n.breakpoints.sort(function(e,t){return n.options.mobileFirst?e-t:t-e})}},r.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},r.prototype.resize=function(){var e=this;c(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=c(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(e,t,i){var n=this;if(e="boolean"==typeof e?!0===(t=e)?0:n.slideCount-1:!0===t?--e:e,n.slideCount<1||e<0||e>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},r.prototype.setCSS=function(e){var t,i,n=this,o={};!0===n.options.rtl&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",o[n.positionProp]=e,!1===n.transformsEnabled||(!(o={})===n.cssTransitions?o[n.animType]="translate("+t+", "+i+")":o[n.animType]="translate3d("+t+", "+i+", 0px)"),n.$slideTrack.css(o)},r.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},r.prototype.setFade=function(){var i,n=this;n.$slides.each(function(e,t){i=n.slideWidth*e*-1,!0===n.options.rtl?c(t).css({position:"relative",right:i,top:0,zIndex:n.options.zIndex-2,opacity:0}):c(t).css({position:"relative",left:i,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},r.prototype.setOption=r.prototype.slickSetOption=function(){var e,t,i,n,o,s=this,r=!1;if("object"===c.type(arguments[0])?(i=arguments[0],r=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(n=arguments[1],r=arguments[2],"responsive"===(i=arguments[0])&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)s.options[i]=n;else if("multiple"===o)c.each(i,function(e,t){s.options[e]=t});else if("responsive"===o)for(t in n)if("array"!==c.type(s.options.responsive))s.options.responsive=[n[t]];else{for(e=s.options.responsive.length-1;0<=e;)s.options.responsive[e].breakpoint===n[t].breakpoint&&s.options.responsive.splice(e,1),e--;s.options.responsive.push(n[t])}r&&(s.unload(),s.reinit())},r.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},r.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},r.prototype.setSlideClasses=function(e){var t,i,n,o,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(e).addClass("slick-current"),!0===s.options.centerMode){var r=s.options.slidesToShow%2==0?1:0;t=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&(t<=e&&e<=s.slideCount-1-t?s.$slides.slice(e-t+r,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=s.options.slidesToShow+e,i.slice(n-t+1+r,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):e===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=s.slideCount-s.options.slidesToShow?s.$slides.slice(e,e+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(o=s.slideCount%s.options.slidesToShow,n=!0===s.options.infinite?s.options.slidesToShow+e:e,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-e<s.options.slidesToShow?i.slice(n-(s.options.slidesToShow-o),n+o).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},r.prototype.setupInfinite=function(){var e,t,i,n=this;if(!0===n.options.fade&&(n.options.centerMode=!1),!0===n.options.infinite&&!1===n.options.fade&&(t=null,n.slideCount>n.options.slidesToShow)){for(i=!0===n.options.centerMode?n.options.slidesToShow+1:n.options.slidesToShow,e=n.slideCount;e>n.slideCount-i;--e)t=e-1,c(n.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-n.slideCount).prependTo(n.$slideTrack).addClass("slick-cloned");for(e=0;e<i+n.slideCount;e+=1)t=e,c(n.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+n.slideCount).appendTo(n.$slideTrack).addClass("slick-cloned");n.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},r.prototype.selectHandler=function(e){var t=c(e.target).is(".slick-slide")?c(e.target):c(e.target).parents(".slick-slide"),i=parseInt(t.attr("data-slick-index"));i=i||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},r.prototype.slideHandler=function(e,t,i){var n,o,s,r,a,l,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))if(!1===t&&c.asNavFor(e),n=e,a=c.getLeft(n),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(n)}):c.postSlide(n));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(n)}):c.postSlide(n));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=n<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),s=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(s),c.fadeSlide(o,function(){c.postSlide(o)})):c.postSlide(o),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(o)}):c.postSlide(o)}},r.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var e,t,i,n,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,i=Math.atan2(t,e),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&0<=n||n<=360&&315<=n?!1===o.options.rtl?"left":"right":135<=n&&n<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?35<=n&&n<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1;if(n.interrupted=!1,n.shouldClick=!(10<n.touchObject.swipeLength),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},r.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},r.prototype.swipeMove=function(e){var t,i,n,o,s,r,a=this;return s=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:e.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<r?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==e.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+n*o:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+n*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},r.prototype.swipeStart=function(e){var t,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,i.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},r.prototype.unload=function(){var e=this;c(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},r.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var e,t,i=this,n=arguments[0],o=Array.prototype.slice.call(arguments,1),s=i.length;for(e=0;e<s;e++)if("object"==typeof n||void 0===n?i[e].slick=new r(i[e],n):t=i[e].slick[n].apply(i[e].slick,o),void 0!==t)return t;return i}}),function(e,t){if("function"==typeof define&&define.amd)define(["module","exports"],t);else if("undefined"!=typeof exports)t(module,exports);else{var i={exports:{}};t(i,i.exports),e.WOW=i.exports}}(this,function(e,t){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t,i){return t&&o(e.prototype,t),i&&o(e,i),e};function o(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t){return 0<=t.indexOf(e)}function r(e,t,i){null!=e.addEventListener?e.addEventListener(t,i,!1):null!=e.attachEvent?e.attachEvent("on"+t,i):e[t]=i}function a(e,t,i){null!=e.removeEventListener?e.removeEventListener(t,i,!1):null!=e.detachEvent?e.detachEvent("on"+t,i):delete e[t]}var l=window.WeakMap||window.MozWeakMap||(n(c,[{key:"get",value:function(e){for(var t=0;t<this.keys.length;t++)if(this.keys[t]===e)return this.values[t]}},{key:"set",value:function(e,t){for(var i=0;i<this.keys.length;i++)if(this.keys[i]===e)return this.values[i]=t,this;return this.keys.push(e),this.values.push(t),this}}]),c);function c(){i(this,c),this.keys=[],this.values=[]}var u=window.MutationObserver||window.WebkitMutationObserver||window.MozMutationObserver||(n(d,[{key:"observe",value:function(){}}]),d.notSupported=!0,d);function d(){i(this,d),"undefined"!=typeof console&&null!==console&&(console.warn("MutationObserver is not supported by your browser."),console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content."))}var p=window.getComputedStyle||function(i){var n=/(\-([a-z]){1})/g;return{getPropertyValue:function(e){"float"===e&&(e="styleFloat"),n.test(e)&&e.replace(n,function(e,t){return t.toUpperCase()});var t=i.currentStyle;return(null!=t?t[e]:void 0)||null}}},h=(n(f,[{key:"init",value:function(){this.element=window.document.documentElement,s(document.readyState,["interactive","complete"])?this.start():r(document,"DOMContentLoaded",this.start),this.finished=[]}},{key:"start",value:function(){var s=this;if(this.stopped=!1,this.boxes=[].slice.call(this.element.querySelectorAll("."+this.config.boxClass)),this.all=this.boxes.slice(0),this.boxes.length)if(this.disabled())this.resetStyle();else for(var e=0;e<this.boxes.length;e++){var t=this.boxes[e];this.applyStyle(t,!0)}this.disabled()||(r(this.config.scrollContainer||window,"scroll",this.scrollHandler),r(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live&&new u(function(e){for(var t=0;t<e.length;t++)for(var i=e[t],n=0;n<i.addedNodes.length;n++){var o=i.addedNodes[n];s.doSync(o)}}).observe(document.body,{childList:!0,subtree:!0})}},{key:"stop",value:function(){this.stopped=!0,a(this.config.scrollContainer||window,"scroll",this.scrollHandler),a(window,"resize",this.scrollHandler),null!=this.interval&&clearInterval(this.interval)}},{key:"sync",value:function(){u.notSupported&&this.doSync(this.element)}},{key:"doSync",value:function(e){if(null==e&&(e=this.element),1===e.nodeType)for(var t=(e=e.parentNode||e).querySelectorAll("."+this.config.boxClass),i=0;i<t.length;i++){var n=t[i];s(n,this.all)||(this.boxes.push(n),this.all.push(n),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(n,!0),this.scrolled=!0)}}},{key:"show",value:function(e){var t,i;return this.applyStyle(e),e.className=e.className+" "+this.config.animateClass,null!=this.config.callback&&this.config.callback(e),t=e,i=this.wowEvent,null!=t.dispatchEvent?t.dispatchEvent(i):i in(null!=t)?t[i]():"on"+i in(null!=t)&&t["on"+i](),r(e,"animationend",this.resetAnimation),r(e,"oanimationend",this.resetAnimation),r(e,"webkitAnimationEnd",this.resetAnimation),r(e,"MSAnimationEnd",this.resetAnimation),e}},{key:"applyStyle",value:function(e,t){var i=this,n=e.getAttribute("data-wow-duration"),o=e.getAttribute("data-wow-delay"),s=e.getAttribute("data-wow-iteration");return this.animate(function(){return i.customStyle(e,t,n,o,s)})}},{key:"resetStyle",value:function(){for(var e=0;e<this.boxes.length;e++)this.boxes[e].style.visibility="visible"}},{key:"resetAnimation",value:function(e){if(0<=e.type.toLowerCase().indexOf("animationend")){var t=e.target||e.srcElement;t.className=t.className.replace(this.config.animateClass,"").trim()}}},{key:"customStyle",value:function(e,t,i,n,o){return t&&this.cacheAnimationName(e),e.style.visibility=t?"hidden":"visible",i&&this.vendorSet(e.style,{animationDuration:i}),n&&this.vendorSet(e.style,{animationDelay:n}),o&&this.vendorSet(e.style,{animationIterationCount:o}),this.vendorSet(e.style,{animationName:t?"none":this.cachedAnimationName(e)}),e}},{key:"vendorSet",value:function(e,t){for(var i in t)if(t.hasOwnProperty(i)){var n=t[i];e[""+i]=n;for(var o=0;o<this.vendors.length;o++)e[""+this.vendors[o]+i.charAt(0).toUpperCase()+i.substr(1)]=n}}},{key:"vendorCSS",value:function(e,t){for(var i=p(e),n=i.getPropertyCSSValue(t),o=0;o<this.vendors.length;o++){var s=this.vendors[o];n=n||i.getPropertyCSSValue("-"+s+"-"+t)}return n}},{key:"animationName",value:function(t){var i=void 0;try{i=this.vendorCSS(t,"animation-name").cssText}catch(e){i=p(t).getPropertyValue("animation-name")}return"none"===i?"":i}},{key:"cacheAnimationName",value:function(e){return this.animationNameCache.set(e,this.animationName(e))}},{key:"cachedAnimationName",value:function(e){return this.animationNameCache.get(e)}},{key:"scrollHandler",value:function(){this.scrolled=!0}},{key:"scrollCallback",value:function(){if(this.scrolled){this.scrolled=!1;for(var e=[],t=0;t<this.boxes.length;t++){var i=this.boxes[t];if(i){if(this.isVisible(i)){this.show(i);continue}e.push(i)}}this.boxes=e,this.boxes.length||this.config.live||this.stop()}}},{key:"offsetTop",value:function(e){for(;void 0===e.offsetTop;)e=e.parentNode;for(var t=e.offsetTop;e.offsetParent;)t+=(e=e.offsetParent).offsetTop;return t}},{key:"isVisible",value:function(e){var t=e.getAttribute("data-wow-offset")||this.config.offset,i=this.config.scrollContainer&&this.config.scrollContainer.scrollTop||window.pageYOffset,n=i+Math.min(this.element.clientHeight,"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight)-t,o=this.offsetTop(e),s=o+e.clientHeight;return o<=n&&i<=s}},{key:"disabled",value:function(){return!this.config.mobile&&(e=navigator.userAgent,/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e));var e}}]),f);function f(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];i(this,f),this.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null,scrollContainer:null},this.animate="requestAnimationFrame"in window?function(e){return window.requestAnimationFrame(e)}:function(e){return e()},this.vendors=["moz","webkit"],this.start=this.start.bind(this),this.resetAnimation=this.resetAnimation.bind(this),this.scrollHandler=this.scrollHandler.bind(this),this.scrollCallback=this.scrollCallback.bind(this),this.scrolled=!0,this.config=function(e,t){for(var i in t)if(null==e[i]){var n=t[i];e[i]=n}return e}(e,this.defaults),null!=e.scrollContainer&&(this.config.scrollContainer=document.querySelector(e.scrollContainer)),this.animationNameCache=new l,this.wowEvent=function(e,t,i,n){var o=!(arguments.length<=1||void 0===t)&&t,s=!(arguments.length<=2||void 0===i)&&i,r=arguments.length<=3||void 0===n?null:n,a=void 0;return null!=document.createEvent?(a=document.createEvent("CustomEvent")).initCustomEvent(e,o,s,r):null!=document.createEventObject?(a=document.createEventObject()).eventType=e:a.eventName=e,a}(this.config.boxClass)}t.default=h,e.exports=t.default});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
